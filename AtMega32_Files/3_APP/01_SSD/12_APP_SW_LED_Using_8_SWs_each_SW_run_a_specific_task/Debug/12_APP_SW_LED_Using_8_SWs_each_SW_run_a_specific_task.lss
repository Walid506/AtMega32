
12_APP_SW_LED_Using_8_SWs_each_SW_run_a_specific_task.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ae4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  00002ae4  00002b78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  008000a6  008000a6  00002bbe  2**0
                  ALLOC
  3 .stab         00002304  00000000  00000000  00002bc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000cfc  00000000  00000000  00004ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005e70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000089a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009754  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000098b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009b41  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a30f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ee       	ldi	r30, 0xE4	; 228
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3a       	cpi	r26, 0xA6	; 166
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 ea       	ldi	r26, 0xA6	; 166
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3a       	cpi	r26, 0xA7	; 167
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4c 09 	call	0x1298	; 0x1298 <main>
      8a:	0c 94 70 15 	jmp	0x2ae0	; 0x2ae0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 39 15 	jmp	0x2a72	; 0x2a72 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 55 15 	jmp	0x2aaa	; 0x2aaa <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 45 15 	jmp	0x2a8a	; 0x2a8a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 61 15 	jmp	0x2ac2	; 0x2ac2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 45 15 	jmp	0x2a8a	; 0x2a8a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 61 15 	jmp	0x2ac2	; 0x2ac2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 39 15 	jmp	0x2a72	; 0x2a72 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 55 15 	jmp	0x2aaa	; 0x2aaa <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 45 15 	jmp	0x2a8a	; 0x2a8a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 61 15 	jmp	0x2ac2	; 0x2ac2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 45 15 	jmp	0x2a8a	; 0x2a8a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 61 15 	jmp	0x2ac2	; 0x2ac2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 45 15 	jmp	0x2a8a	; 0x2a8a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 61 15 	jmp	0x2ac2	; 0x2ac2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 49 15 	jmp	0x2a92	; 0x2a92 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 65 15 	jmp	0x2aca	; 0x2aca <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_u8SetPinDirection>:




u8 DIO_u8SetPinDirection   (u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Direction )
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	28 97       	sbiw	r28, 0x08	; 8
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8a 83       	std	Y+2, r24	; 0x02
     b5c:	6b 83       	std	Y+3, r22	; 0x03
     b5e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorStatus = 0 ; /* Indicate That No Error */
     b60:	19 82       	std	Y+1, r1	; 0x01

	if( (Copy_u8Port <= DIO_u8PORTD ) && ( Copy_u8Pin <= DIO_u8PIN7 ) )
     b62:	8a 81       	ldd	r24, Y+2	; 0x02
     b64:	84 30       	cpi	r24, 0x04	; 4
     b66:	08 f0       	brcs	.+2      	; 0xb6a <DIO_u8SetPinDirection+0x24>
     b68:	f8 c0       	rjmp	.+496    	; 0xd5a <DIO_u8SetPinDirection+0x214>
     b6a:	8b 81       	ldd	r24, Y+3	; 0x03
     b6c:	88 30       	cpi	r24, 0x08	; 8
     b6e:	08 f0       	brcs	.+2      	; 0xb72 <DIO_u8SetPinDirection+0x2c>
     b70:	f4 c0       	rjmp	.+488    	; 0xd5a <DIO_u8SetPinDirection+0x214>
	{
		if( Copy_u8Direction == DIO_u8PIN_INPUT)
     b72:	8c 81       	ldd	r24, Y+4	; 0x04
     b74:	88 23       	and	r24, r24
     b76:	09 f0       	breq	.+2      	; 0xb7a <DIO_u8SetPinDirection+0x34>
     b78:	77 c0       	rjmp	.+238    	; 0xc68 <DIO_u8SetPinDirection+0x122>
		{
			switch(Copy_u8Port)
     b7a:	8a 81       	ldd	r24, Y+2	; 0x02
     b7c:	28 2f       	mov	r18, r24
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	38 87       	std	Y+8, r19	; 0x08
     b82:	2f 83       	std	Y+7, r18	; 0x07
     b84:	8f 81       	ldd	r24, Y+7	; 0x07
     b86:	98 85       	ldd	r25, Y+8	; 0x08
     b88:	81 30       	cpi	r24, 0x01	; 1
     b8a:	91 05       	cpc	r25, r1
     b8c:	59 f1       	breq	.+86     	; 0xbe4 <DIO_u8SetPinDirection+0x9e>
     b8e:	2f 81       	ldd	r18, Y+7	; 0x07
     b90:	38 85       	ldd	r19, Y+8	; 0x08
     b92:	22 30       	cpi	r18, 0x02	; 2
     b94:	31 05       	cpc	r19, r1
     b96:	2c f4       	brge	.+10     	; 0xba2 <DIO_u8SetPinDirection+0x5c>
     b98:	8f 81       	ldd	r24, Y+7	; 0x07
     b9a:	98 85       	ldd	r25, Y+8	; 0x08
     b9c:	00 97       	sbiw	r24, 0x00	; 0
     b9e:	69 f0       	breq	.+26     	; 0xbba <DIO_u8SetPinDirection+0x74>
     ba0:	60 c0       	rjmp	.+192    	; 0xc62 <DIO_u8SetPinDirection+0x11c>
     ba2:	2f 81       	ldd	r18, Y+7	; 0x07
     ba4:	38 85       	ldd	r19, Y+8	; 0x08
     ba6:	22 30       	cpi	r18, 0x02	; 2
     ba8:	31 05       	cpc	r19, r1
     baa:	89 f1       	breq	.+98     	; 0xc0e <DIO_u8SetPinDirection+0xc8>
     bac:	8f 81       	ldd	r24, Y+7	; 0x07
     bae:	98 85       	ldd	r25, Y+8	; 0x08
     bb0:	83 30       	cpi	r24, 0x03	; 3
     bb2:	91 05       	cpc	r25, r1
     bb4:	09 f4       	brne	.+2      	; 0xbb8 <DIO_u8SetPinDirection+0x72>
     bb6:	40 c0       	rjmp	.+128    	; 0xc38 <DIO_u8SetPinDirection+0xf2>
     bb8:	54 c0       	rjmp	.+168    	; 0xc62 <DIO_u8SetPinDirection+0x11c>
			{
			case DIO_u8PORTA : CLR_BIT(DDRA , Copy_u8Pin) ; break ;
     bba:	aa e3       	ldi	r26, 0x3A	; 58
     bbc:	b0 e0       	ldi	r27, 0x00	; 0
     bbe:	ea e3       	ldi	r30, 0x3A	; 58
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	48 2f       	mov	r20, r24
     bc6:	8b 81       	ldd	r24, Y+3	; 0x03
     bc8:	28 2f       	mov	r18, r24
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	02 2e       	mov	r0, r18
     bd2:	02 c0       	rjmp	.+4      	; 0xbd8 <DIO_u8SetPinDirection+0x92>
     bd4:	88 0f       	add	r24, r24
     bd6:	99 1f       	adc	r25, r25
     bd8:	0a 94       	dec	r0
     bda:	e2 f7       	brpl	.-8      	; 0xbd4 <DIO_u8SetPinDirection+0x8e>
     bdc:	80 95       	com	r24
     bde:	84 23       	and	r24, r20
     be0:	8c 93       	st	X, r24
     be2:	bd c0       	rjmp	.+378    	; 0xd5e <DIO_u8SetPinDirection+0x218>
			case DIO_u8PORTB : CLR_BIT(DDRB , Copy_u8Pin) ; break ;
     be4:	a7 e3       	ldi	r26, 0x37	; 55
     be6:	b0 e0       	ldi	r27, 0x00	; 0
     be8:	e7 e3       	ldi	r30, 0x37	; 55
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	80 81       	ld	r24, Z
     bee:	48 2f       	mov	r20, r24
     bf0:	8b 81       	ldd	r24, Y+3	; 0x03
     bf2:	28 2f       	mov	r18, r24
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	02 2e       	mov	r0, r18
     bfc:	02 c0       	rjmp	.+4      	; 0xc02 <DIO_u8SetPinDirection+0xbc>
     bfe:	88 0f       	add	r24, r24
     c00:	99 1f       	adc	r25, r25
     c02:	0a 94       	dec	r0
     c04:	e2 f7       	brpl	.-8      	; 0xbfe <DIO_u8SetPinDirection+0xb8>
     c06:	80 95       	com	r24
     c08:	84 23       	and	r24, r20
     c0a:	8c 93       	st	X, r24
     c0c:	a8 c0       	rjmp	.+336    	; 0xd5e <DIO_u8SetPinDirection+0x218>
			case DIO_u8PORTC : CLR_BIT(DDRC , Copy_u8Pin) ; break ;
     c0e:	a4 e3       	ldi	r26, 0x34	; 52
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	e4 e3       	ldi	r30, 0x34	; 52
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	80 81       	ld	r24, Z
     c18:	48 2f       	mov	r20, r24
     c1a:	8b 81       	ldd	r24, Y+3	; 0x03
     c1c:	28 2f       	mov	r18, r24
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	02 2e       	mov	r0, r18
     c26:	02 c0       	rjmp	.+4      	; 0xc2c <DIO_u8SetPinDirection+0xe6>
     c28:	88 0f       	add	r24, r24
     c2a:	99 1f       	adc	r25, r25
     c2c:	0a 94       	dec	r0
     c2e:	e2 f7       	brpl	.-8      	; 0xc28 <DIO_u8SetPinDirection+0xe2>
     c30:	80 95       	com	r24
     c32:	84 23       	and	r24, r20
     c34:	8c 93       	st	X, r24
     c36:	93 c0       	rjmp	.+294    	; 0xd5e <DIO_u8SetPinDirection+0x218>
			case DIO_u8PORTD : CLR_BIT(DDRD , Copy_u8Pin) ; break ;
     c38:	a1 e3       	ldi	r26, 0x31	; 49
     c3a:	b0 e0       	ldi	r27, 0x00	; 0
     c3c:	e1 e3       	ldi	r30, 0x31	; 49
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	80 81       	ld	r24, Z
     c42:	48 2f       	mov	r20, r24
     c44:	8b 81       	ldd	r24, Y+3	; 0x03
     c46:	28 2f       	mov	r18, r24
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	02 2e       	mov	r0, r18
     c50:	02 c0       	rjmp	.+4      	; 0xc56 <DIO_u8SetPinDirection+0x110>
     c52:	88 0f       	add	r24, r24
     c54:	99 1f       	adc	r25, r25
     c56:	0a 94       	dec	r0
     c58:	e2 f7       	brpl	.-8      	; 0xc52 <DIO_u8SetPinDirection+0x10c>
     c5a:	80 95       	com	r24
     c5c:	84 23       	and	r24, r20
     c5e:	8c 93       	st	X, r24
     c60:	7e c0       	rjmp	.+252    	; 0xd5e <DIO_u8SetPinDirection+0x218>
			default : Local_u8ErrorStatus = 1; break ;
     c62:	81 e0       	ldi	r24, 0x01	; 1
     c64:	89 83       	std	Y+1, r24	; 0x01
     c66:	7b c0       	rjmp	.+246    	; 0xd5e <DIO_u8SetPinDirection+0x218>
			}
		}

		else if (Copy_u8Direction == DIO_u8PIN_OUTPUT)
     c68:	8c 81       	ldd	r24, Y+4	; 0x04
     c6a:	81 30       	cpi	r24, 0x01	; 1
     c6c:	09 f0       	breq	.+2      	; 0xc70 <DIO_u8SetPinDirection+0x12a>
     c6e:	72 c0       	rjmp	.+228    	; 0xd54 <DIO_u8SetPinDirection+0x20e>
		{
			switch(Copy_u8Port)
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	3e 83       	std	Y+6, r19	; 0x06
     c78:	2d 83       	std	Y+5, r18	; 0x05
     c7a:	8d 81       	ldd	r24, Y+5	; 0x05
     c7c:	9e 81       	ldd	r25, Y+6	; 0x06
     c7e:	81 30       	cpi	r24, 0x01	; 1
     c80:	91 05       	cpc	r25, r1
     c82:	49 f1       	breq	.+82     	; 0xcd6 <DIO_u8SetPinDirection+0x190>
     c84:	2d 81       	ldd	r18, Y+5	; 0x05
     c86:	3e 81       	ldd	r19, Y+6	; 0x06
     c88:	22 30       	cpi	r18, 0x02	; 2
     c8a:	31 05       	cpc	r19, r1
     c8c:	2c f4       	brge	.+10     	; 0xc98 <DIO_u8SetPinDirection+0x152>
     c8e:	8d 81       	ldd	r24, Y+5	; 0x05
     c90:	9e 81       	ldd	r25, Y+6	; 0x06
     c92:	00 97       	sbiw	r24, 0x00	; 0
     c94:	61 f0       	breq	.+24     	; 0xcae <DIO_u8SetPinDirection+0x168>
     c96:	5b c0       	rjmp	.+182    	; 0xd4e <DIO_u8SetPinDirection+0x208>
     c98:	2d 81       	ldd	r18, Y+5	; 0x05
     c9a:	3e 81       	ldd	r19, Y+6	; 0x06
     c9c:	22 30       	cpi	r18, 0x02	; 2
     c9e:	31 05       	cpc	r19, r1
     ca0:	71 f1       	breq	.+92     	; 0xcfe <DIO_u8SetPinDirection+0x1b8>
     ca2:	8d 81       	ldd	r24, Y+5	; 0x05
     ca4:	9e 81       	ldd	r25, Y+6	; 0x06
     ca6:	83 30       	cpi	r24, 0x03	; 3
     ca8:	91 05       	cpc	r25, r1
     caa:	e9 f1       	breq	.+122    	; 0xd26 <DIO_u8SetPinDirection+0x1e0>
     cac:	50 c0       	rjmp	.+160    	; 0xd4e <DIO_u8SetPinDirection+0x208>
			{
			case DIO_u8PORTA : SET_BIT(DDRA , Copy_u8Pin) ; break ;
     cae:	aa e3       	ldi	r26, 0x3A	; 58
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	ea e3       	ldi	r30, 0x3A	; 58
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	48 2f       	mov	r20, r24
     cba:	8b 81       	ldd	r24, Y+3	; 0x03
     cbc:	28 2f       	mov	r18, r24
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	02 2e       	mov	r0, r18
     cc6:	02 c0       	rjmp	.+4      	; 0xccc <DIO_u8SetPinDirection+0x186>
     cc8:	88 0f       	add	r24, r24
     cca:	99 1f       	adc	r25, r25
     ccc:	0a 94       	dec	r0
     cce:	e2 f7       	brpl	.-8      	; 0xcc8 <DIO_u8SetPinDirection+0x182>
     cd0:	84 2b       	or	r24, r20
     cd2:	8c 93       	st	X, r24
     cd4:	44 c0       	rjmp	.+136    	; 0xd5e <DIO_u8SetPinDirection+0x218>
			case DIO_u8PORTB : SET_BIT(DDRB , Copy_u8Pin) ; break ;
     cd6:	a7 e3       	ldi	r26, 0x37	; 55
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e7 e3       	ldi	r30, 0x37	; 55
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	80 81       	ld	r24, Z
     ce0:	48 2f       	mov	r20, r24
     ce2:	8b 81       	ldd	r24, Y+3	; 0x03
     ce4:	28 2f       	mov	r18, r24
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	02 2e       	mov	r0, r18
     cee:	02 c0       	rjmp	.+4      	; 0xcf4 <DIO_u8SetPinDirection+0x1ae>
     cf0:	88 0f       	add	r24, r24
     cf2:	99 1f       	adc	r25, r25
     cf4:	0a 94       	dec	r0
     cf6:	e2 f7       	brpl	.-8      	; 0xcf0 <DIO_u8SetPinDirection+0x1aa>
     cf8:	84 2b       	or	r24, r20
     cfa:	8c 93       	st	X, r24
     cfc:	30 c0       	rjmp	.+96     	; 0xd5e <DIO_u8SetPinDirection+0x218>
			case DIO_u8PORTC : SET_BIT(DDRC , Copy_u8Pin) ; break ;
     cfe:	a4 e3       	ldi	r26, 0x34	; 52
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	e4 e3       	ldi	r30, 0x34	; 52
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	48 2f       	mov	r20, r24
     d0a:	8b 81       	ldd	r24, Y+3	; 0x03
     d0c:	28 2f       	mov	r18, r24
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	02 2e       	mov	r0, r18
     d16:	02 c0       	rjmp	.+4      	; 0xd1c <DIO_u8SetPinDirection+0x1d6>
     d18:	88 0f       	add	r24, r24
     d1a:	99 1f       	adc	r25, r25
     d1c:	0a 94       	dec	r0
     d1e:	e2 f7       	brpl	.-8      	; 0xd18 <DIO_u8SetPinDirection+0x1d2>
     d20:	84 2b       	or	r24, r20
     d22:	8c 93       	st	X, r24
     d24:	1c c0       	rjmp	.+56     	; 0xd5e <DIO_u8SetPinDirection+0x218>
			case DIO_u8PORTD : SET_BIT(DDRD , Copy_u8Pin) ; break ;
     d26:	a1 e3       	ldi	r26, 0x31	; 49
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	e1 e3       	ldi	r30, 0x31	; 49
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	48 2f       	mov	r20, r24
     d32:	8b 81       	ldd	r24, Y+3	; 0x03
     d34:	28 2f       	mov	r18, r24
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	02 2e       	mov	r0, r18
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <DIO_u8SetPinDirection+0x1fe>
     d40:	88 0f       	add	r24, r24
     d42:	99 1f       	adc	r25, r25
     d44:	0a 94       	dec	r0
     d46:	e2 f7       	brpl	.-8      	; 0xd40 <DIO_u8SetPinDirection+0x1fa>
     d48:	84 2b       	or	r24, r20
     d4a:	8c 93       	st	X, r24
     d4c:	08 c0       	rjmp	.+16     	; 0xd5e <DIO_u8SetPinDirection+0x218>
			default : Local_u8ErrorStatus = 1; break ;
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	89 83       	std	Y+1, r24	; 0x01
     d52:	05 c0       	rjmp	.+10     	; 0xd5e <DIO_u8SetPinDirection+0x218>
			}
		}
		else
		{
			Local_u8ErrorStatus = 1;
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	89 83       	std	Y+1, r24	; 0x01
     d58:	02 c0       	rjmp	.+4      	; 0xd5e <DIO_u8SetPinDirection+0x218>
		}
	}
	else
	{
		Local_u8ErrorStatus = 1 ;
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorStatus ;
     d5e:	89 81       	ldd	r24, Y+1	; 0x01
}
     d60:	28 96       	adiw	r28, 0x08	; 8
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	f8 94       	cli
     d66:	de bf       	out	0x3e, r29	; 62
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	cd bf       	out	0x3d, r28	; 61
     d6c:	cf 91       	pop	r28
     d6e:	df 91       	pop	r29
     d70:	08 95       	ret

00000d72 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection  (u8 Copy_u8Port , u8 Copy_u8Direction )
{
     d72:	df 93       	push	r29
     d74:	cf 93       	push	r28
     d76:	00 d0       	rcall	.+0      	; 0xd78 <DIO_u8SetPortDirection+0x6>
     d78:	00 d0       	rcall	.+0      	; 0xd7a <DIO_u8SetPortDirection+0x8>
     d7a:	0f 92       	push	r0
     d7c:	cd b7       	in	r28, 0x3d	; 61
     d7e:	de b7       	in	r29, 0x3e	; 62
     d80:	8a 83       	std	Y+2, r24	; 0x02
     d82:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8ErrorStatus = 0 ; /* Indicate That No Error */
     d84:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
     d86:	8a 81       	ldd	r24, Y+2	; 0x02
     d88:	28 2f       	mov	r18, r24
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	3d 83       	std	Y+5, r19	; 0x05
     d8e:	2c 83       	std	Y+4, r18	; 0x04
     d90:	8c 81       	ldd	r24, Y+4	; 0x04
     d92:	9d 81       	ldd	r25, Y+5	; 0x05
     d94:	81 30       	cpi	r24, 0x01	; 1
     d96:	91 05       	cpc	r25, r1
     d98:	d1 f0       	breq	.+52     	; 0xdce <DIO_u8SetPortDirection+0x5c>
     d9a:	2c 81       	ldd	r18, Y+4	; 0x04
     d9c:	3d 81       	ldd	r19, Y+5	; 0x05
     d9e:	22 30       	cpi	r18, 0x02	; 2
     da0:	31 05       	cpc	r19, r1
     da2:	2c f4       	brge	.+10     	; 0xdae <DIO_u8SetPortDirection+0x3c>
     da4:	8c 81       	ldd	r24, Y+4	; 0x04
     da6:	9d 81       	ldd	r25, Y+5	; 0x05
     da8:	00 97       	sbiw	r24, 0x00	; 0
     daa:	61 f0       	breq	.+24     	; 0xdc4 <DIO_u8SetPortDirection+0x52>
     dac:	1f c0       	rjmp	.+62     	; 0xdec <DIO_u8SetPortDirection+0x7a>
     dae:	2c 81       	ldd	r18, Y+4	; 0x04
     db0:	3d 81       	ldd	r19, Y+5	; 0x05
     db2:	22 30       	cpi	r18, 0x02	; 2
     db4:	31 05       	cpc	r19, r1
     db6:	81 f0       	breq	.+32     	; 0xdd8 <DIO_u8SetPortDirection+0x66>
     db8:	8c 81       	ldd	r24, Y+4	; 0x04
     dba:	9d 81       	ldd	r25, Y+5	; 0x05
     dbc:	83 30       	cpi	r24, 0x03	; 3
     dbe:	91 05       	cpc	r25, r1
     dc0:	81 f0       	breq	.+32     	; 0xde2 <DIO_u8SetPortDirection+0x70>
     dc2:	14 c0       	rjmp	.+40     	; 0xdec <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA : DDRA = Copy_u8Direction ; break ;
     dc4:	ea e3       	ldi	r30, 0x3A	; 58
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	8b 81       	ldd	r24, Y+3	; 0x03
     dca:	80 83       	st	Z, r24
     dcc:	11 c0       	rjmp	.+34     	; 0xdf0 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB : DDRB = Copy_u8Direction ; break ;
     dce:	e7 e3       	ldi	r30, 0x37	; 55
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	8b 81       	ldd	r24, Y+3	; 0x03
     dd4:	80 83       	st	Z, r24
     dd6:	0c c0       	rjmp	.+24     	; 0xdf0 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC : DDRC = Copy_u8Direction ; break ;
     dd8:	e4 e3       	ldi	r30, 0x34	; 52
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	80 83       	st	Z, r24
     de0:	07 c0       	rjmp	.+14     	; 0xdf0 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD : DDRD = Copy_u8Direction ; break ;
     de2:	e1 e3       	ldi	r30, 0x31	; 49
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	8b 81       	ldd	r24, Y+3	; 0x03
     de8:	80 83       	st	Z, r24
     dea:	02 c0       	rjmp	.+4      	; 0xdf0 <DIO_u8SetPortDirection+0x7e>
	default : Local_u8ErrorStatus = 1; break ;
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorStatus ;
     df0:	89 81       	ldd	r24, Y+1	; 0x01

}
     df2:	0f 90       	pop	r0
     df4:	0f 90       	pop	r0
     df6:	0f 90       	pop	r0
     df8:	0f 90       	pop	r0
     dfa:	0f 90       	pop	r0
     dfc:	cf 91       	pop	r28
     dfe:	df 91       	pop	r29
     e00:	08 95       	ret

00000e02 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue       (u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Value )
{
     e02:	df 93       	push	r29
     e04:	cf 93       	push	r28
     e06:	cd b7       	in	r28, 0x3d	; 61
     e08:	de b7       	in	r29, 0x3e	; 62
     e0a:	28 97       	sbiw	r28, 0x08	; 8
     e0c:	0f b6       	in	r0, 0x3f	; 63
     e0e:	f8 94       	cli
     e10:	de bf       	out	0x3e, r29	; 62
     e12:	0f be       	out	0x3f, r0	; 63
     e14:	cd bf       	out	0x3d, r28	; 61
     e16:	8a 83       	std	Y+2, r24	; 0x02
     e18:	6b 83       	std	Y+3, r22	; 0x03
     e1a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorStatus = 0 ; /* Indicate That No Error */
     e1c:	19 82       	std	Y+1, r1	; 0x01

	if(  ( Copy_u8Pin <= DIO_u8PIN7 ) )
     e1e:	8b 81       	ldd	r24, Y+3	; 0x03
     e20:	88 30       	cpi	r24, 0x08	; 8
     e22:	08 f0       	brcs	.+2      	; 0xe26 <DIO_u8SetPinValue+0x24>
     e24:	f4 c0       	rjmp	.+488    	; 0x100e <DIO_u8SetPinValue+0x20c>
	{
		if( Copy_u8Value == DIO_u8PIN_LOW)
     e26:	8c 81       	ldd	r24, Y+4	; 0x04
     e28:	88 23       	and	r24, r24
     e2a:	09 f0       	breq	.+2      	; 0xe2e <DIO_u8SetPinValue+0x2c>
     e2c:	77 c0       	rjmp	.+238    	; 0xf1c <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8Port)
     e2e:	8a 81       	ldd	r24, Y+2	; 0x02
     e30:	28 2f       	mov	r18, r24
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	38 87       	std	Y+8, r19	; 0x08
     e36:	2f 83       	std	Y+7, r18	; 0x07
     e38:	8f 81       	ldd	r24, Y+7	; 0x07
     e3a:	98 85       	ldd	r25, Y+8	; 0x08
     e3c:	81 30       	cpi	r24, 0x01	; 1
     e3e:	91 05       	cpc	r25, r1
     e40:	59 f1       	breq	.+86     	; 0xe98 <DIO_u8SetPinValue+0x96>
     e42:	2f 81       	ldd	r18, Y+7	; 0x07
     e44:	38 85       	ldd	r19, Y+8	; 0x08
     e46:	22 30       	cpi	r18, 0x02	; 2
     e48:	31 05       	cpc	r19, r1
     e4a:	2c f4       	brge	.+10     	; 0xe56 <DIO_u8SetPinValue+0x54>
     e4c:	8f 81       	ldd	r24, Y+7	; 0x07
     e4e:	98 85       	ldd	r25, Y+8	; 0x08
     e50:	00 97       	sbiw	r24, 0x00	; 0
     e52:	69 f0       	breq	.+26     	; 0xe6e <DIO_u8SetPinValue+0x6c>
     e54:	60 c0       	rjmp	.+192    	; 0xf16 <DIO_u8SetPinValue+0x114>
     e56:	2f 81       	ldd	r18, Y+7	; 0x07
     e58:	38 85       	ldd	r19, Y+8	; 0x08
     e5a:	22 30       	cpi	r18, 0x02	; 2
     e5c:	31 05       	cpc	r19, r1
     e5e:	89 f1       	breq	.+98     	; 0xec2 <DIO_u8SetPinValue+0xc0>
     e60:	8f 81       	ldd	r24, Y+7	; 0x07
     e62:	98 85       	ldd	r25, Y+8	; 0x08
     e64:	83 30       	cpi	r24, 0x03	; 3
     e66:	91 05       	cpc	r25, r1
     e68:	09 f4       	brne	.+2      	; 0xe6c <DIO_u8SetPinValue+0x6a>
     e6a:	40 c0       	rjmp	.+128    	; 0xeec <DIO_u8SetPinValue+0xea>
     e6c:	54 c0       	rjmp	.+168    	; 0xf16 <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA : CLR_BIT(PORTA , Copy_u8Pin) ; break ;
     e6e:	ab e3       	ldi	r26, 0x3B	; 59
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	eb e3       	ldi	r30, 0x3B	; 59
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	48 2f       	mov	r20, r24
     e7a:	8b 81       	ldd	r24, Y+3	; 0x03
     e7c:	28 2f       	mov	r18, r24
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	02 2e       	mov	r0, r18
     e86:	02 c0       	rjmp	.+4      	; 0xe8c <DIO_u8SetPinValue+0x8a>
     e88:	88 0f       	add	r24, r24
     e8a:	99 1f       	adc	r25, r25
     e8c:	0a 94       	dec	r0
     e8e:	e2 f7       	brpl	.-8      	; 0xe88 <DIO_u8SetPinValue+0x86>
     e90:	80 95       	com	r24
     e92:	84 23       	and	r24, r20
     e94:	8c 93       	st	X, r24
     e96:	bd c0       	rjmp	.+378    	; 0x1012 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB : CLR_BIT(PORTB , Copy_u8Pin) ; break ;
     e98:	a8 e3       	ldi	r26, 0x38	; 56
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e8 e3       	ldi	r30, 0x38	; 56
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	48 2f       	mov	r20, r24
     ea4:	8b 81       	ldd	r24, Y+3	; 0x03
     ea6:	28 2f       	mov	r18, r24
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	02 2e       	mov	r0, r18
     eb0:	02 c0       	rjmp	.+4      	; 0xeb6 <DIO_u8SetPinValue+0xb4>
     eb2:	88 0f       	add	r24, r24
     eb4:	99 1f       	adc	r25, r25
     eb6:	0a 94       	dec	r0
     eb8:	e2 f7       	brpl	.-8      	; 0xeb2 <DIO_u8SetPinValue+0xb0>
     eba:	80 95       	com	r24
     ebc:	84 23       	and	r24, r20
     ebe:	8c 93       	st	X, r24
     ec0:	a8 c0       	rjmp	.+336    	; 0x1012 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC : CLR_BIT(PORTC , Copy_u8Pin) ; break ;
     ec2:	a5 e3       	ldi	r26, 0x35	; 53
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	e5 e3       	ldi	r30, 0x35	; 53
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	48 2f       	mov	r20, r24
     ece:	8b 81       	ldd	r24, Y+3	; 0x03
     ed0:	28 2f       	mov	r18, r24
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	02 2e       	mov	r0, r18
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <DIO_u8SetPinValue+0xde>
     edc:	88 0f       	add	r24, r24
     ede:	99 1f       	adc	r25, r25
     ee0:	0a 94       	dec	r0
     ee2:	e2 f7       	brpl	.-8      	; 0xedc <DIO_u8SetPinValue+0xda>
     ee4:	80 95       	com	r24
     ee6:	84 23       	and	r24, r20
     ee8:	8c 93       	st	X, r24
     eea:	93 c0       	rjmp	.+294    	; 0x1012 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD : CLR_BIT(PORTD , Copy_u8Pin) ; break ;
     eec:	a2 e3       	ldi	r26, 0x32	; 50
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	e2 e3       	ldi	r30, 0x32	; 50
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	48 2f       	mov	r20, r24
     ef8:	8b 81       	ldd	r24, Y+3	; 0x03
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	02 2e       	mov	r0, r18
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <DIO_u8SetPinValue+0x108>
     f06:	88 0f       	add	r24, r24
     f08:	99 1f       	adc	r25, r25
     f0a:	0a 94       	dec	r0
     f0c:	e2 f7       	brpl	.-8      	; 0xf06 <DIO_u8SetPinValue+0x104>
     f0e:	80 95       	com	r24
     f10:	84 23       	and	r24, r20
     f12:	8c 93       	st	X, r24
     f14:	7e c0       	rjmp	.+252    	; 0x1012 <DIO_u8SetPinValue+0x210>
			default : Local_u8ErrorStatus = 1; break ;
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	89 83       	std	Y+1, r24	; 0x01
     f1a:	7b c0       	rjmp	.+246    	; 0x1012 <DIO_u8SetPinValue+0x210>
			}
		}
		else if (Copy_u8Value == DIO_u8PIN_HIGH)
     f1c:	8c 81       	ldd	r24, Y+4	; 0x04
     f1e:	81 30       	cpi	r24, 0x01	; 1
     f20:	09 f0       	breq	.+2      	; 0xf24 <DIO_u8SetPinValue+0x122>
     f22:	72 c0       	rjmp	.+228    	; 0x1008 <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
     f24:	8a 81       	ldd	r24, Y+2	; 0x02
     f26:	28 2f       	mov	r18, r24
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	3e 83       	std	Y+6, r19	; 0x06
     f2c:	2d 83       	std	Y+5, r18	; 0x05
     f2e:	8d 81       	ldd	r24, Y+5	; 0x05
     f30:	9e 81       	ldd	r25, Y+6	; 0x06
     f32:	81 30       	cpi	r24, 0x01	; 1
     f34:	91 05       	cpc	r25, r1
     f36:	49 f1       	breq	.+82     	; 0xf8a <DIO_u8SetPinValue+0x188>
     f38:	2d 81       	ldd	r18, Y+5	; 0x05
     f3a:	3e 81       	ldd	r19, Y+6	; 0x06
     f3c:	22 30       	cpi	r18, 0x02	; 2
     f3e:	31 05       	cpc	r19, r1
     f40:	2c f4       	brge	.+10     	; 0xf4c <DIO_u8SetPinValue+0x14a>
     f42:	8d 81       	ldd	r24, Y+5	; 0x05
     f44:	9e 81       	ldd	r25, Y+6	; 0x06
     f46:	00 97       	sbiw	r24, 0x00	; 0
     f48:	61 f0       	breq	.+24     	; 0xf62 <DIO_u8SetPinValue+0x160>
     f4a:	5b c0       	rjmp	.+182    	; 0x1002 <DIO_u8SetPinValue+0x200>
     f4c:	2d 81       	ldd	r18, Y+5	; 0x05
     f4e:	3e 81       	ldd	r19, Y+6	; 0x06
     f50:	22 30       	cpi	r18, 0x02	; 2
     f52:	31 05       	cpc	r19, r1
     f54:	71 f1       	breq	.+92     	; 0xfb2 <DIO_u8SetPinValue+0x1b0>
     f56:	8d 81       	ldd	r24, Y+5	; 0x05
     f58:	9e 81       	ldd	r25, Y+6	; 0x06
     f5a:	83 30       	cpi	r24, 0x03	; 3
     f5c:	91 05       	cpc	r25, r1
     f5e:	e9 f1       	breq	.+122    	; 0xfda <DIO_u8SetPinValue+0x1d8>
     f60:	50 c0       	rjmp	.+160    	; 0x1002 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA : SET_BIT(PORTA , Copy_u8Pin) ; break ;
     f62:	ab e3       	ldi	r26, 0x3B	; 59
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	eb e3       	ldi	r30, 0x3B	; 59
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	48 2f       	mov	r20, r24
     f6e:	8b 81       	ldd	r24, Y+3	; 0x03
     f70:	28 2f       	mov	r18, r24
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	02 2e       	mov	r0, r18
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <DIO_u8SetPinValue+0x17e>
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	0a 94       	dec	r0
     f82:	e2 f7       	brpl	.-8      	; 0xf7c <DIO_u8SetPinValue+0x17a>
     f84:	84 2b       	or	r24, r20
     f86:	8c 93       	st	X, r24
     f88:	44 c0       	rjmp	.+136    	; 0x1012 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB : SET_BIT(PORTB , Copy_u8Pin) ; break ;
     f8a:	a8 e3       	ldi	r26, 0x38	; 56
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	e8 e3       	ldi	r30, 0x38	; 56
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	48 2f       	mov	r20, r24
     f96:	8b 81       	ldd	r24, Y+3	; 0x03
     f98:	28 2f       	mov	r18, r24
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	02 2e       	mov	r0, r18
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <DIO_u8SetPinValue+0x1a6>
     fa4:	88 0f       	add	r24, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	0a 94       	dec	r0
     faa:	e2 f7       	brpl	.-8      	; 0xfa4 <DIO_u8SetPinValue+0x1a2>
     fac:	84 2b       	or	r24, r20
     fae:	8c 93       	st	X, r24
     fb0:	30 c0       	rjmp	.+96     	; 0x1012 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC : SET_BIT(PORTC , Copy_u8Pin) ; break ;
     fb2:	a5 e3       	ldi	r26, 0x35	; 53
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e5 e3       	ldi	r30, 0x35	; 53
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	48 2f       	mov	r20, r24
     fbe:	8b 81       	ldd	r24, Y+3	; 0x03
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	02 2e       	mov	r0, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <DIO_u8SetPinValue+0x1ce>
     fcc:	88 0f       	add	r24, r24
     fce:	99 1f       	adc	r25, r25
     fd0:	0a 94       	dec	r0
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <DIO_u8SetPinValue+0x1ca>
     fd4:	84 2b       	or	r24, r20
     fd6:	8c 93       	st	X, r24
     fd8:	1c c0       	rjmp	.+56     	; 0x1012 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD : SET_BIT(PORTD , Copy_u8Pin) ; break ;
     fda:	a2 e3       	ldi	r26, 0x32	; 50
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	e2 e3       	ldi	r30, 0x32	; 50
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	48 2f       	mov	r20, r24
     fe6:	8b 81       	ldd	r24, Y+3	; 0x03
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	02 2e       	mov	r0, r18
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <DIO_u8SetPinValue+0x1f6>
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	0a 94       	dec	r0
     ffa:	e2 f7       	brpl	.-8      	; 0xff4 <DIO_u8SetPinValue+0x1f2>
     ffc:	84 2b       	or	r24, r20
     ffe:	8c 93       	st	X, r24
    1000:	08 c0       	rjmp	.+16     	; 0x1012 <DIO_u8SetPinValue+0x210>
			default : Local_u8ErrorStatus = 1; break ;
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	89 83       	std	Y+1, r24	; 0x01
    1006:	05 c0       	rjmp	.+10     	; 0x1012 <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorStatus = 1;
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	89 83       	std	Y+1, r24	; 0x01
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorStatus = 1 ;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorStatus ;
    1012:	89 81       	ldd	r24, Y+1	; 0x01

}
    1014:	28 96       	adiw	r28, 0x08	; 8
    1016:	0f b6       	in	r0, 0x3f	; 63
    1018:	f8 94       	cli
    101a:	de bf       	out	0x3e, r29	; 62
    101c:	0f be       	out	0x3f, r0	; 63
    101e:	cd bf       	out	0x3d, r28	; 61
    1020:	cf 91       	pop	r28
    1022:	df 91       	pop	r29
    1024:	08 95       	ret

00001026 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue      (u8 Copy_u8Port , u8 Copy_u8Value )
{
    1026:	df 93       	push	r29
    1028:	cf 93       	push	r28
    102a:	00 d0       	rcall	.+0      	; 0x102c <DIO_u8SetPortValue+0x6>
    102c:	00 d0       	rcall	.+0      	; 0x102e <DIO_u8SetPortValue+0x8>
    102e:	0f 92       	push	r0
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	8a 83       	std	Y+2, r24	; 0x02
    1036:	6b 83       	std	Y+3, r22	; 0x03
		u8 Local_u8ErrorStatus = 0 ; /* Indicate That No Error */
    1038:	19 82       	std	Y+1, r1	; 0x01

		switch(Copy_u8Port)
    103a:	8a 81       	ldd	r24, Y+2	; 0x02
    103c:	28 2f       	mov	r18, r24
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	3d 83       	std	Y+5, r19	; 0x05
    1042:	2c 83       	std	Y+4, r18	; 0x04
    1044:	8c 81       	ldd	r24, Y+4	; 0x04
    1046:	9d 81       	ldd	r25, Y+5	; 0x05
    1048:	81 30       	cpi	r24, 0x01	; 1
    104a:	91 05       	cpc	r25, r1
    104c:	d1 f0       	breq	.+52     	; 0x1082 <DIO_u8SetPortValue+0x5c>
    104e:	2c 81       	ldd	r18, Y+4	; 0x04
    1050:	3d 81       	ldd	r19, Y+5	; 0x05
    1052:	22 30       	cpi	r18, 0x02	; 2
    1054:	31 05       	cpc	r19, r1
    1056:	2c f4       	brge	.+10     	; 0x1062 <DIO_u8SetPortValue+0x3c>
    1058:	8c 81       	ldd	r24, Y+4	; 0x04
    105a:	9d 81       	ldd	r25, Y+5	; 0x05
    105c:	00 97       	sbiw	r24, 0x00	; 0
    105e:	61 f0       	breq	.+24     	; 0x1078 <DIO_u8SetPortValue+0x52>
    1060:	1f c0       	rjmp	.+62     	; 0x10a0 <DIO_u8SetPortValue+0x7a>
    1062:	2c 81       	ldd	r18, Y+4	; 0x04
    1064:	3d 81       	ldd	r19, Y+5	; 0x05
    1066:	22 30       	cpi	r18, 0x02	; 2
    1068:	31 05       	cpc	r19, r1
    106a:	81 f0       	breq	.+32     	; 0x108c <DIO_u8SetPortValue+0x66>
    106c:	8c 81       	ldd	r24, Y+4	; 0x04
    106e:	9d 81       	ldd	r25, Y+5	; 0x05
    1070:	83 30       	cpi	r24, 0x03	; 3
    1072:	91 05       	cpc	r25, r1
    1074:	81 f0       	breq	.+32     	; 0x1096 <DIO_u8SetPortValue+0x70>
    1076:	14 c0       	rjmp	.+40     	; 0x10a0 <DIO_u8SetPortValue+0x7a>
		{
		case DIO_u8PORTA : PORTA = Copy_u8Value ; break ;
    1078:	eb e3       	ldi	r30, 0x3B	; 59
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	8b 81       	ldd	r24, Y+3	; 0x03
    107e:	80 83       	st	Z, r24
    1080:	11 c0       	rjmp	.+34     	; 0x10a4 <DIO_u8SetPortValue+0x7e>
		case DIO_u8PORTB : PORTB = Copy_u8Value ; break ;
    1082:	e8 e3       	ldi	r30, 0x38	; 56
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	8b 81       	ldd	r24, Y+3	; 0x03
    1088:	80 83       	st	Z, r24
    108a:	0c c0       	rjmp	.+24     	; 0x10a4 <DIO_u8SetPortValue+0x7e>
		case DIO_u8PORTC : PORTC = Copy_u8Value ; break ;
    108c:	e5 e3       	ldi	r30, 0x35	; 53
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	8b 81       	ldd	r24, Y+3	; 0x03
    1092:	80 83       	st	Z, r24
    1094:	07 c0       	rjmp	.+14     	; 0x10a4 <DIO_u8SetPortValue+0x7e>
		case DIO_u8PORTD : PORTD = Copy_u8Value ; break ;
    1096:	e2 e3       	ldi	r30, 0x32	; 50
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	80 83       	st	Z, r24
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <DIO_u8SetPortValue+0x7e>
		default : Local_u8ErrorStatus = 1; break ;
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	89 83       	std	Y+1, r24	; 0x01
		}

		return Local_u8ErrorStatus ;
    10a4:	89 81       	ldd	r24, Y+1	; 0x01

}
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	0f 90       	pop	r0
    10ac:	0f 90       	pop	r0
    10ae:	0f 90       	pop	r0
    10b0:	cf 91       	pop	r28
    10b2:	df 91       	pop	r29
    10b4:	08 95       	ret

000010b6 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue       (u8 Copy_u8Port , u8 Copy_u8Pin , u8* Copy_u8Value )
{
    10b6:	df 93       	push	r29
    10b8:	cf 93       	push	r28
    10ba:	cd b7       	in	r28, 0x3d	; 61
    10bc:	de b7       	in	r29, 0x3e	; 62
    10be:	27 97       	sbiw	r28, 0x07	; 7
    10c0:	0f b6       	in	r0, 0x3f	; 63
    10c2:	f8 94       	cli
    10c4:	de bf       	out	0x3e, r29	; 62
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	cd bf       	out	0x3d, r28	; 61
    10ca:	8a 83       	std	Y+2, r24	; 0x02
    10cc:	6b 83       	std	Y+3, r22	; 0x03
    10ce:	5d 83       	std	Y+5, r21	; 0x05
    10d0:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorStatus = 0 ; /* Indicate That No Error */
    10d2:	19 82       	std	Y+1, r1	; 0x01

		if( (Copy_u8Value != NULL) && ( Copy_u8Pin <= DIO_u8PIN7) )
    10d4:	8c 81       	ldd	r24, Y+4	; 0x04
    10d6:	9d 81       	ldd	r25, Y+5	; 0x05
    10d8:	00 97       	sbiw	r24, 0x00	; 0
    10da:	09 f4       	brne	.+2      	; 0x10de <DIO_u8GetPinValue+0x28>
    10dc:	78 c0       	rjmp	.+240    	; 0x11ce <DIO_u8GetPinValue+0x118>
    10de:	8b 81       	ldd	r24, Y+3	; 0x03
    10e0:	88 30       	cpi	r24, 0x08	; 8
    10e2:	08 f0       	brcs	.+2      	; 0x10e6 <DIO_u8GetPinValue+0x30>
    10e4:	74 c0       	rjmp	.+232    	; 0x11ce <DIO_u8GetPinValue+0x118>
		{
			switch(Copy_u8Port)
    10e6:	8a 81       	ldd	r24, Y+2	; 0x02
    10e8:	28 2f       	mov	r18, r24
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	3f 83       	std	Y+7, r19	; 0x07
    10ee:	2e 83       	std	Y+6, r18	; 0x06
    10f0:	4e 81       	ldd	r20, Y+6	; 0x06
    10f2:	5f 81       	ldd	r21, Y+7	; 0x07
    10f4:	41 30       	cpi	r20, 0x01	; 1
    10f6:	51 05       	cpc	r21, r1
    10f8:	59 f1       	breq	.+86     	; 0x1150 <DIO_u8GetPinValue+0x9a>
    10fa:	8e 81       	ldd	r24, Y+6	; 0x06
    10fc:	9f 81       	ldd	r25, Y+7	; 0x07
    10fe:	82 30       	cpi	r24, 0x02	; 2
    1100:	91 05       	cpc	r25, r1
    1102:	34 f4       	brge	.+12     	; 0x1110 <DIO_u8GetPinValue+0x5a>
    1104:	2e 81       	ldd	r18, Y+6	; 0x06
    1106:	3f 81       	ldd	r19, Y+7	; 0x07
    1108:	21 15       	cp	r18, r1
    110a:	31 05       	cpc	r19, r1
    110c:	69 f0       	breq	.+26     	; 0x1128 <DIO_u8GetPinValue+0x72>
    110e:	5c c0       	rjmp	.+184    	; 0x11c8 <DIO_u8GetPinValue+0x112>
    1110:	4e 81       	ldd	r20, Y+6	; 0x06
    1112:	5f 81       	ldd	r21, Y+7	; 0x07
    1114:	42 30       	cpi	r20, 0x02	; 2
    1116:	51 05       	cpc	r21, r1
    1118:	79 f1       	breq	.+94     	; 0x1178 <DIO_u8GetPinValue+0xc2>
    111a:	8e 81       	ldd	r24, Y+6	; 0x06
    111c:	9f 81       	ldd	r25, Y+7	; 0x07
    111e:	83 30       	cpi	r24, 0x03	; 3
    1120:	91 05       	cpc	r25, r1
    1122:	09 f4       	brne	.+2      	; 0x1126 <DIO_u8GetPinValue+0x70>
    1124:	3d c0       	rjmp	.+122    	; 0x11a0 <DIO_u8GetPinValue+0xea>
    1126:	50 c0       	rjmp	.+160    	; 0x11c8 <DIO_u8GetPinValue+0x112>
			{
			case DIO_u8PORTA : *Copy_u8Value = GET_BIT(PINA , Copy_u8Pin ) ; break ;
    1128:	e9 e3       	ldi	r30, 0x39	; 57
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	28 2f       	mov	r18, r24
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	8b 81       	ldd	r24, Y+3	; 0x03
    1134:	88 2f       	mov	r24, r24
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	a9 01       	movw	r20, r18
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <DIO_u8GetPinValue+0x8a>
    113c:	55 95       	asr	r21
    113e:	47 95       	ror	r20
    1140:	8a 95       	dec	r24
    1142:	e2 f7       	brpl	.-8      	; 0x113c <DIO_u8GetPinValue+0x86>
    1144:	ca 01       	movw	r24, r20
    1146:	81 70       	andi	r24, 0x01	; 1
    1148:	ec 81       	ldd	r30, Y+4	; 0x04
    114a:	fd 81       	ldd	r31, Y+5	; 0x05
    114c:	80 83       	st	Z, r24
    114e:	41 c0       	rjmp	.+130    	; 0x11d2 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTB : *Copy_u8Value = GET_BIT(PINB , Copy_u8Pin ) ; break ;
    1150:	e6 e3       	ldi	r30, 0x36	; 54
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	8b 81       	ldd	r24, Y+3	; 0x03
    115c:	88 2f       	mov	r24, r24
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	a9 01       	movw	r20, r18
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <DIO_u8GetPinValue+0xb2>
    1164:	55 95       	asr	r21
    1166:	47 95       	ror	r20
    1168:	8a 95       	dec	r24
    116a:	e2 f7       	brpl	.-8      	; 0x1164 <DIO_u8GetPinValue+0xae>
    116c:	ca 01       	movw	r24, r20
    116e:	81 70       	andi	r24, 0x01	; 1
    1170:	ec 81       	ldd	r30, Y+4	; 0x04
    1172:	fd 81       	ldd	r31, Y+5	; 0x05
    1174:	80 83       	st	Z, r24
    1176:	2d c0       	rjmp	.+90     	; 0x11d2 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTC : *Copy_u8Value = GET_BIT(PINC , Copy_u8Pin ) ; break ;
    1178:	e3 e3       	ldi	r30, 0x33	; 51
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	28 2f       	mov	r18, r24
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	8b 81       	ldd	r24, Y+3	; 0x03
    1184:	88 2f       	mov	r24, r24
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	a9 01       	movw	r20, r18
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <DIO_u8GetPinValue+0xda>
    118c:	55 95       	asr	r21
    118e:	47 95       	ror	r20
    1190:	8a 95       	dec	r24
    1192:	e2 f7       	brpl	.-8      	; 0x118c <DIO_u8GetPinValue+0xd6>
    1194:	ca 01       	movw	r24, r20
    1196:	81 70       	andi	r24, 0x01	; 1
    1198:	ec 81       	ldd	r30, Y+4	; 0x04
    119a:	fd 81       	ldd	r31, Y+5	; 0x05
    119c:	80 83       	st	Z, r24
    119e:	19 c0       	rjmp	.+50     	; 0x11d2 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTD : *Copy_u8Value = GET_BIT(PIND , Copy_u8Pin ) ; break ;
    11a0:	e0 e3       	ldi	r30, 0x30	; 48
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	28 2f       	mov	r18, r24
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	8b 81       	ldd	r24, Y+3	; 0x03
    11ac:	88 2f       	mov	r24, r24
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	a9 01       	movw	r20, r18
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <DIO_u8GetPinValue+0x102>
    11b4:	55 95       	asr	r21
    11b6:	47 95       	ror	r20
    11b8:	8a 95       	dec	r24
    11ba:	e2 f7       	brpl	.-8      	; 0x11b4 <DIO_u8GetPinValue+0xfe>
    11bc:	ca 01       	movw	r24, r20
    11be:	81 70       	andi	r24, 0x01	; 1
    11c0:	ec 81       	ldd	r30, Y+4	; 0x04
    11c2:	fd 81       	ldd	r31, Y+5	; 0x05
    11c4:	80 83       	st	Z, r24
    11c6:	05 c0       	rjmp	.+10     	; 0x11d2 <DIO_u8GetPinValue+0x11c>
			default : Local_u8ErrorStatus = 1; break ;
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	89 83       	std	Y+1, r24	; 0x01
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <DIO_u8GetPinValue+0x11c>
			}
		}
		else
		{
			Local_u8ErrorStatus = 1 ;
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	89 83       	std	Y+1, r24	; 0x01
		}


		return Local_u8ErrorStatus ;
    11d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11d4:	27 96       	adiw	r28, 0x07	; 7
    11d6:	0f b6       	in	r0, 0x3f	; 63
    11d8:	f8 94       	cli
    11da:	de bf       	out	0x3e, r29	; 62
    11dc:	0f be       	out	0x3f, r0	; 63
    11de:	cd bf       	out	0x3d, r28	; 61
    11e0:	cf 91       	pop	r28
    11e2:	df 91       	pop	r29
    11e4:	08 95       	ret

000011e6 <LED_voidInit>:


/* Implementation of the functions*/

void LED_voidInit        ( LED_Type LED_Configuration )
{
    11e6:	df 93       	push	r29
    11e8:	cf 93       	push	r28
    11ea:	00 d0       	rcall	.+0      	; 0x11ec <LED_voidInit+0x6>
    11ec:	0f 92       	push	r0
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
    11f2:	69 83       	std	Y+1, r22	; 0x01
    11f4:	7a 83       	std	Y+2, r23	; 0x02
    11f6:	8b 83       	std	Y+3, r24	; 0x03

	/* make the pin output */
	DIO_u8SetPinDirection(LED_Configuration.Port , LED_Configuration.Pin , DIO_u8PIN_OUTPUT ) ;
    11f8:	89 81       	ldd	r24, Y+1	; 0x01
    11fa:	9a 81       	ldd	r25, Y+2	; 0x02
    11fc:	69 2f       	mov	r22, r25
    11fe:	41 e0       	ldi	r20, 0x01	; 1
    1200:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinDirection>

}
    1204:	0f 90       	pop	r0
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
    120a:	cf 91       	pop	r28
    120c:	df 91       	pop	r29
    120e:	08 95       	ret

00001210 <LED_voidOn>:

void LED_voidOn          ( LED_Type LED_Configuration )
{
    1210:	df 93       	push	r29
    1212:	cf 93       	push	r28
    1214:	00 d0       	rcall	.+0      	; 0x1216 <LED_voidOn+0x6>
    1216:	0f 92       	push	r0
    1218:	cd b7       	in	r28, 0x3d	; 61
    121a:	de b7       	in	r29, 0x3e	; 62
    121c:	69 83       	std	Y+1, r22	; 0x01
    121e:	7a 83       	std	Y+2, r23	; 0x02
    1220:	8b 83       	std	Y+3, r24	; 0x03
	if( LED_Configuration.Active_State == LED_ACTIVE_HIGH )
    1222:	8b 81       	ldd	r24, Y+3	; 0x03
    1224:	81 30       	cpi	r24, 0x01	; 1
    1226:	39 f4       	brne	.+14     	; 0x1236 <LED_voidOn+0x26>
	{
		DIO_u8SetPinValue(LED_Configuration.Port , LED_Configuration.Pin , DIO_u8PIN_HIGH) ;
    1228:	89 81       	ldd	r24, Y+1	; 0x01
    122a:	9a 81       	ldd	r25, Y+2	; 0x02
    122c:	69 2f       	mov	r22, r25
    122e:	41 e0       	ldi	r20, 0x01	; 1
    1230:	0e 94 01 07 	call	0xe02	; 0xe02 <DIO_u8SetPinValue>
    1234:	09 c0       	rjmp	.+18     	; 0x1248 <LED_voidOn+0x38>
	}
	else if ( LED_Configuration.Active_State == LED_ACTIVE_LOW )
    1236:	8b 81       	ldd	r24, Y+3	; 0x03
    1238:	88 23       	and	r24, r24
    123a:	31 f4       	brne	.+12     	; 0x1248 <LED_voidOn+0x38>
	{
		DIO_u8SetPinValue(LED_Configuration.Port , LED_Configuration.Pin , DIO_u8PIN_LOW) ;
    123c:	89 81       	ldd	r24, Y+1	; 0x01
    123e:	9a 81       	ldd	r25, Y+2	; 0x02
    1240:	69 2f       	mov	r22, r25
    1242:	40 e0       	ldi	r20, 0x00	; 0
    1244:	0e 94 01 07 	call	0xe02	; 0xe02 <DIO_u8SetPinValue>
	}
}
    1248:	0f 90       	pop	r0
    124a:	0f 90       	pop	r0
    124c:	0f 90       	pop	r0
    124e:	cf 91       	pop	r28
    1250:	df 91       	pop	r29
    1252:	08 95       	ret

00001254 <LED_voidOff>:

void LED_voidOff         ( LED_Type LED_Configuration )
{
    1254:	df 93       	push	r29
    1256:	cf 93       	push	r28
    1258:	00 d0       	rcall	.+0      	; 0x125a <LED_voidOff+0x6>
    125a:	0f 92       	push	r0
    125c:	cd b7       	in	r28, 0x3d	; 61
    125e:	de b7       	in	r29, 0x3e	; 62
    1260:	69 83       	std	Y+1, r22	; 0x01
    1262:	7a 83       	std	Y+2, r23	; 0x02
    1264:	8b 83       	std	Y+3, r24	; 0x03
	if( LED_Configuration.Active_State == LED_ACTIVE_HIGH )
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	81 30       	cpi	r24, 0x01	; 1
    126a:	39 f4       	brne	.+14     	; 0x127a <LED_voidOff+0x26>
	{
		DIO_u8SetPinValue(LED_Configuration.Port , LED_Configuration.Pin , DIO_u8PIN_LOW) ;
    126c:	89 81       	ldd	r24, Y+1	; 0x01
    126e:	9a 81       	ldd	r25, Y+2	; 0x02
    1270:	69 2f       	mov	r22, r25
    1272:	40 e0       	ldi	r20, 0x00	; 0
    1274:	0e 94 01 07 	call	0xe02	; 0xe02 <DIO_u8SetPinValue>
    1278:	09 c0       	rjmp	.+18     	; 0x128c <LED_voidOff+0x38>
	}
	else if ( LED_Configuration.Active_State == LED_ACTIVE_LOW )
    127a:	8b 81       	ldd	r24, Y+3	; 0x03
    127c:	88 23       	and	r24, r24
    127e:	31 f4       	brne	.+12     	; 0x128c <LED_voidOff+0x38>
	{
		DIO_u8SetPinValue(LED_Configuration.Port , LED_Configuration.Pin , DIO_u8PIN_HIGH) ;
    1280:	89 81       	ldd	r24, Y+1	; 0x01
    1282:	9a 81       	ldd	r25, Y+2	; 0x02
    1284:	69 2f       	mov	r22, r25
    1286:	41 e0       	ldi	r20, 0x01	; 1
    1288:	0e 94 01 07 	call	0xe02	; 0xe02 <DIO_u8SetPinValue>
	}
}
    128c:	0f 90       	pop	r0
    128e:	0f 90       	pop	r0
    1290:	0f 90       	pop	r0
    1292:	cf 91       	pop	r28
    1294:	df 91       	pop	r29
    1296:	08 95       	ret

00001298 <main>:
SW_Type SW8  = {SW_u8PORTC,SW_u8PIN7,SW_Ext_PULL_UP};



void main ()
{
    1298:	df 93       	push	r29
    129a:	cf 93       	push	r28
    129c:	0f 92       	push	r0
    129e:	cd b7       	in	r28, 0x3d	; 61
    12a0:	de b7       	in	r29, 0x3e	; 62
	SSD_voidInitialDataPort(SSD1);
    12a2:	80 91 68 00 	lds	r24, 0x0068
    12a6:	90 91 69 00 	lds	r25, 0x0069
    12aa:	a0 91 6a 00 	lds	r26, 0x006A
    12ae:	b0 91 6b 00 	lds	r27, 0x006B
    12b2:	bc 01       	movw	r22, r24
    12b4:	cd 01       	movw	r24, r26
    12b6:	0e 94 2c 14 	call	0x2858	; 0x2858 <SSD_voidInitialDataPort>
	SSD_voidEnable(SSD1);
    12ba:	80 91 68 00 	lds	r24, 0x0068
    12be:	90 91 69 00 	lds	r25, 0x0069
    12c2:	a0 91 6a 00 	lds	r26, 0x006A
    12c6:	b0 91 6b 00 	lds	r27, 0x006B
    12ca:	bc 01       	movw	r22, r24
    12cc:	cd 01       	movw	r24, r26
    12ce:	0e 94 41 14 	call	0x2882	; 0x2882 <SSD_voidEnable>
	s8 i;
	for (i=0;i<8;i++)
    12d2:	19 82       	std	Y+1, r1	; 0x01
    12d4:	15 c0       	rjmp	.+42     	; 0x1300 <main+0x68>
	{
		LED_voidInit(Led_arr[i]);
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	28 2f       	mov	r18, r24
    12da:	33 27       	eor	r19, r19
    12dc:	27 fd       	sbrc	r18, 7
    12de:	30 95       	com	r19
    12e0:	c9 01       	movw	r24, r18
    12e2:	88 0f       	add	r24, r24
    12e4:	99 1f       	adc	r25, r25
    12e6:	82 0f       	add	r24, r18
    12e8:	93 1f       	adc	r25, r19
    12ea:	fc 01       	movw	r30, r24
    12ec:	e4 59       	subi	r30, 0x94	; 148
    12ee:	ff 4f       	sbci	r31, 0xFF	; 255
    12f0:	60 81       	ld	r22, Z
    12f2:	71 81       	ldd	r23, Z+1	; 0x01
    12f4:	82 81       	ldd	r24, Z+2	; 0x02
    12f6:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <LED_voidInit>
void main ()
{
	SSD_voidInitialDataPort(SSD1);
	SSD_voidEnable(SSD1);
	s8 i;
	for (i=0;i<8;i++)
    12fa:	89 81       	ldd	r24, Y+1	; 0x01
    12fc:	8f 5f       	subi	r24, 0xFF	; 255
    12fe:	89 83       	std	Y+1, r24	; 0x01
    1300:	89 81       	ldd	r24, Y+1	; 0x01
    1302:	88 30       	cpi	r24, 0x08	; 8
    1304:	44 f3       	brlt	.-48     	; 0x12d6 <main+0x3e>
	{
		LED_voidInit(Led_arr[i]);
	}
	SW_voidInit(SW1);
    1306:	60 91 84 00 	lds	r22, 0x0084
    130a:	70 91 85 00 	lds	r23, 0x0085
    130e:	80 91 86 00 	lds	r24, 0x0086
    1312:	0e 94 d6 14 	call	0x29ac	; 0x29ac <SW_voidInit>
	SW_voidInit(SW2);
    1316:	60 91 87 00 	lds	r22, 0x0087
    131a:	70 91 88 00 	lds	r23, 0x0088
    131e:	80 91 89 00 	lds	r24, 0x0089
    1322:	0e 94 d6 14 	call	0x29ac	; 0x29ac <SW_voidInit>
	SW_voidInit(SW3);
    1326:	60 91 8a 00 	lds	r22, 0x008A
    132a:	70 91 8b 00 	lds	r23, 0x008B
    132e:	80 91 8c 00 	lds	r24, 0x008C
    1332:	0e 94 d6 14 	call	0x29ac	; 0x29ac <SW_voidInit>
	SW_voidInit(SW4);
    1336:	60 91 8d 00 	lds	r22, 0x008D
    133a:	70 91 8e 00 	lds	r23, 0x008E
    133e:	80 91 8f 00 	lds	r24, 0x008F
    1342:	0e 94 d6 14 	call	0x29ac	; 0x29ac <SW_voidInit>
	SW_voidInit(SW5);
    1346:	60 91 90 00 	lds	r22, 0x0090
    134a:	70 91 91 00 	lds	r23, 0x0091
    134e:	80 91 92 00 	lds	r24, 0x0092
    1352:	0e 94 d6 14 	call	0x29ac	; 0x29ac <SW_voidInit>
	SW_voidInit(SW6);
    1356:	60 91 93 00 	lds	r22, 0x0093
    135a:	70 91 94 00 	lds	r23, 0x0094
    135e:	80 91 95 00 	lds	r24, 0x0095
    1362:	0e 94 d6 14 	call	0x29ac	; 0x29ac <SW_voidInit>
	SW_voidInit(SW7);
    1366:	60 91 96 00 	lds	r22, 0x0096
    136a:	70 91 97 00 	lds	r23, 0x0097
    136e:	80 91 98 00 	lds	r24, 0x0098
    1372:	0e 94 d6 14 	call	0x29ac	; 0x29ac <SW_voidInit>
	SSD_voidInitialDataPort(SSD1);
    1376:	80 91 68 00 	lds	r24, 0x0068
    137a:	90 91 69 00 	lds	r25, 0x0069
    137e:	a0 91 6a 00 	lds	r26, 0x006A
    1382:	b0 91 6b 00 	lds	r27, 0x006B
    1386:	bc 01       	movw	r22, r24
    1388:	cd 01       	movw	r24, r26
    138a:	0e 94 2c 14 	call	0x2858	; 0x2858 <SSD_voidInitialDataPort>
	SSD_voidEnable(SSD1);
    138e:	80 91 68 00 	lds	r24, 0x0068
    1392:	90 91 69 00 	lds	r25, 0x0069
    1396:	a0 91 6a 00 	lds	r26, 0x006A
    139a:	b0 91 6b 00 	lds	r27, 0x006B
    139e:	bc 01       	movw	r22, r24
    13a0:	cd 01       	movw	r24, r26
    13a2:	0e 94 41 14 	call	0x2882	; 0x2882 <SSD_voidEnable>


	while (1)
	{

		if(SW_u8GetPressed(SW1))
    13a6:	60 91 84 00 	lds	r22, 0x0084
    13aa:	70 91 85 00 	lds	r23, 0x0085
    13ae:	80 91 86 00 	lds	r24, 0x0086
    13b2:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <SW_u8GetPressed>
    13b6:	88 23       	and	r24, r24
    13b8:	11 f0       	breq	.+4      	; 0x13be <main+0x126>
		{
			LEDS_voidFlashing();
    13ba:	0e 94 35 0a 	call	0x146a	; 0x146a <LEDS_voidFlashing>
		}
		if (SW_u8GetPressed(SW2))
    13be:	60 91 87 00 	lds	r22, 0x0087
    13c2:	70 91 88 00 	lds	r23, 0x0088
    13c6:	80 91 89 00 	lds	r24, 0x0089
    13ca:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <SW_u8GetPressed>
    13ce:	88 23       	and	r24, r24
    13d0:	11 f0       	breq	.+4      	; 0x13d6 <main+0x13e>
		{
			LEDS_voidShiftingL();
    13d2:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <LEDS_voidShiftingL>
		}
		if (SW_u8GetPressed(SW3))
    13d6:	60 91 8a 00 	lds	r22, 0x008A
    13da:	70 91 8b 00 	lds	r23, 0x008B
    13de:	80 91 8c 00 	lds	r24, 0x008C
    13e2:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <SW_u8GetPressed>
    13e6:	88 23       	and	r24, r24
    13e8:	11 f0       	breq	.+4      	; 0x13ee <main+0x156>
		{
			LEDS_voidShiftingR();
    13ea:	0e 94 9a 0c 	call	0x1934	; 0x1934 <LEDS_voidShiftingR>
		}
		if (SW_u8GetPressed(SW4))
    13ee:	60 91 8d 00 	lds	r22, 0x008D
    13f2:	70 91 8e 00 	lds	r23, 0x008E
    13f6:	80 91 8f 00 	lds	r24, 0x008F
    13fa:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <SW_u8GetPressed>
    13fe:	88 23       	and	r24, r24
    1400:	11 f0       	breq	.+4      	; 0x1406 <main+0x16e>
		{
			LEDS_Converging();
    1402:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <LEDS_Converging>
		}
		if (SW_u8GetPressed(SW5))
    1406:	60 91 90 00 	lds	r22, 0x0090
    140a:	70 91 91 00 	lds	r23, 0x0091
    140e:	80 91 92 00 	lds	r24, 0x0092
    1412:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <SW_u8GetPressed>
    1416:	88 23       	and	r24, r24
    1418:	11 f0       	breq	.+4      	; 0x141e <main+0x186>
		{
			LEDS_Diverging();
    141a:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <LEDS_Diverging>
		}
		if (SW_u8GetPressed(SW6))
    141e:	60 91 93 00 	lds	r22, 0x0093
    1422:	70 91 94 00 	lds	r23, 0x0094
    1426:	80 91 95 00 	lds	r24, 0x0095
    142a:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <SW_u8GetPressed>
    142e:	88 23       	and	r24, r24
    1430:	11 f0       	breq	.+4      	; 0x1436 <main+0x19e>
		{
			LEDS_Ping_Pong_Effect();
    1432:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <LEDS_Ping_Pong_Effect>
		}
		if (SW_u8GetPressed(SW7))
    1436:	60 91 96 00 	lds	r22, 0x0096
    143a:	70 91 97 00 	lds	r23, 0x0097
    143e:	80 91 98 00 	lds	r24, 0x0098
    1442:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <SW_u8GetPressed>
    1446:	88 23       	and	r24, r24
    1448:	11 f0       	breq	.+4      	; 0x144e <main+0x1b6>
		{
			Incrementing_LED();
    144a:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <Incrementing_LED>
		}
		if (SW_u8GetPressed(SW8))
    144e:	60 91 99 00 	lds	r22, 0x0099
    1452:	70 91 9a 00 	lds	r23, 0x009A
    1456:	80 91 9b 00 	lds	r24, 0x009B
    145a:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <SW_u8GetPressed>
    145e:	88 23       	and	r24, r24
    1460:	09 f4       	brne	.+2      	; 0x1464 <main+0x1cc>
    1462:	a1 cf       	rjmp	.-190    	; 0x13a6 <main+0x10e>
		{
			SSD_voidCount();
    1464:	0e 94 10 13 	call	0x2620	; 0x2620 <SSD_voidCount>
    1468:	9e cf       	rjmp	.-196    	; 0x13a6 <main+0x10e>

0000146a <LEDS_voidFlashing>:
}



void LEDS_voidFlashing()
{
    146a:	df 93       	push	r29
    146c:	cf 93       	push	r28
    146e:	cd b7       	in	r28, 0x3d	; 61
    1470:	de b7       	in	r29, 0x3e	; 62
    1472:	6e 97       	sbiw	r28, 0x1e	; 30
    1474:	0f b6       	in	r0, 0x3f	; 63
    1476:	f8 94       	cli
    1478:	de bf       	out	0x3e, r29	; 62
    147a:	0f be       	out	0x3f, r0	; 63
    147c:	cd bf       	out	0x3d, r28	; 61
	for(u8 i =0 ; i < 8 ; i++ )
    147e:	1e 8e       	std	Y+30, r1	; 0x1e
    1480:	13 c0       	rjmp	.+38     	; 0x14a8 <LEDS_voidFlashing+0x3e>
	{
		LED_voidOn( Led_arr[i] )  ;
    1482:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1484:	28 2f       	mov	r18, r24
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	c9 01       	movw	r24, r18
    148a:	88 0f       	add	r24, r24
    148c:	99 1f       	adc	r25, r25
    148e:	82 0f       	add	r24, r18
    1490:	93 1f       	adc	r25, r19
    1492:	fc 01       	movw	r30, r24
    1494:	e4 59       	subi	r30, 0x94	; 148
    1496:	ff 4f       	sbci	r31, 0xFF	; 255
    1498:	60 81       	ld	r22, Z
    149a:	71 81       	ldd	r23, Z+1	; 0x01
    149c:	82 81       	ldd	r24, Z+2	; 0x02
    149e:	0e 94 08 09 	call	0x1210	; 0x1210 <LED_voidOn>



void LEDS_voidFlashing()
{
	for(u8 i =0 ; i < 8 ; i++ )
    14a2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    14a4:	8f 5f       	subi	r24, 0xFF	; 255
    14a6:	8e 8f       	std	Y+30, r24	; 0x1e
    14a8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    14aa:	88 30       	cpi	r24, 0x08	; 8
    14ac:	50 f3       	brcs	.-44     	; 0x1482 <LEDS_voidFlashing+0x18>
    14ae:	80 e0       	ldi	r24, 0x00	; 0
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	a8 e4       	ldi	r26, 0x48	; 72
    14b4:	b3 e4       	ldi	r27, 0x43	; 67
    14b6:	89 8f       	std	Y+25, r24	; 0x19
    14b8:	9a 8f       	std	Y+26, r25	; 0x1a
    14ba:	ab 8f       	std	Y+27, r26	; 0x1b
    14bc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14be:	69 8d       	ldd	r22, Y+25	; 0x19
    14c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14c6:	20 e0       	ldi	r18, 0x00	; 0
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	4a ef       	ldi	r20, 0xFA	; 250
    14cc:	54 e4       	ldi	r21, 0x44	; 68
    14ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14d2:	dc 01       	movw	r26, r24
    14d4:	cb 01       	movw	r24, r22
    14d6:	8d 8b       	std	Y+21, r24	; 0x15
    14d8:	9e 8b       	std	Y+22, r25	; 0x16
    14da:	af 8b       	std	Y+23, r26	; 0x17
    14dc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14de:	6d 89       	ldd	r22, Y+21	; 0x15
    14e0:	7e 89       	ldd	r23, Y+22	; 0x16
    14e2:	8f 89       	ldd	r24, Y+23	; 0x17
    14e4:	98 8d       	ldd	r25, Y+24	; 0x18
    14e6:	20 e0       	ldi	r18, 0x00	; 0
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	40 e8       	ldi	r20, 0x80	; 128
    14ec:	5f e3       	ldi	r21, 0x3F	; 63
    14ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14f2:	88 23       	and	r24, r24
    14f4:	2c f4       	brge	.+10     	; 0x1500 <LEDS_voidFlashing+0x96>
		__ticks = 1;
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	9c 8b       	std	Y+20, r25	; 0x14
    14fc:	8b 8b       	std	Y+19, r24	; 0x13
    14fe:	3f c0       	rjmp	.+126    	; 0x157e <LEDS_voidFlashing+0x114>
	else if (__tmp > 65535)
    1500:	6d 89       	ldd	r22, Y+21	; 0x15
    1502:	7e 89       	ldd	r23, Y+22	; 0x16
    1504:	8f 89       	ldd	r24, Y+23	; 0x17
    1506:	98 8d       	ldd	r25, Y+24	; 0x18
    1508:	20 e0       	ldi	r18, 0x00	; 0
    150a:	3f ef       	ldi	r19, 0xFF	; 255
    150c:	4f e7       	ldi	r20, 0x7F	; 127
    150e:	57 e4       	ldi	r21, 0x47	; 71
    1510:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1514:	18 16       	cp	r1, r24
    1516:	4c f5       	brge	.+82     	; 0x156a <LEDS_voidFlashing+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1518:	69 8d       	ldd	r22, Y+25	; 0x19
    151a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    151c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    151e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1520:	20 e0       	ldi	r18, 0x00	; 0
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	40 e2       	ldi	r20, 0x20	; 32
    1526:	51 e4       	ldi	r21, 0x41	; 65
    1528:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    152c:	dc 01       	movw	r26, r24
    152e:	cb 01       	movw	r24, r22
    1530:	bc 01       	movw	r22, r24
    1532:	cd 01       	movw	r24, r26
    1534:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1538:	dc 01       	movw	r26, r24
    153a:	cb 01       	movw	r24, r22
    153c:	9c 8b       	std	Y+20, r25	; 0x14
    153e:	8b 8b       	std	Y+19, r24	; 0x13
    1540:	0f c0       	rjmp	.+30     	; 0x1560 <LEDS_voidFlashing+0xf6>
    1542:	88 ec       	ldi	r24, 0xC8	; 200
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	9a 8b       	std	Y+18, r25	; 0x12
    1548:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    154a:	89 89       	ldd	r24, Y+17	; 0x11
    154c:	9a 89       	ldd	r25, Y+18	; 0x12
    154e:	01 97       	sbiw	r24, 0x01	; 1
    1550:	f1 f7       	brne	.-4      	; 0x154e <LEDS_voidFlashing+0xe4>
    1552:	9a 8b       	std	Y+18, r25	; 0x12
    1554:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1556:	8b 89       	ldd	r24, Y+19	; 0x13
    1558:	9c 89       	ldd	r25, Y+20	; 0x14
    155a:	01 97       	sbiw	r24, 0x01	; 1
    155c:	9c 8b       	std	Y+20, r25	; 0x14
    155e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1560:	8b 89       	ldd	r24, Y+19	; 0x13
    1562:	9c 89       	ldd	r25, Y+20	; 0x14
    1564:	00 97       	sbiw	r24, 0x00	; 0
    1566:	69 f7       	brne	.-38     	; 0x1542 <LEDS_voidFlashing+0xd8>
    1568:	14 c0       	rjmp	.+40     	; 0x1592 <LEDS_voidFlashing+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    156a:	6d 89       	ldd	r22, Y+21	; 0x15
    156c:	7e 89       	ldd	r23, Y+22	; 0x16
    156e:	8f 89       	ldd	r24, Y+23	; 0x17
    1570:	98 8d       	ldd	r25, Y+24	; 0x18
    1572:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1576:	dc 01       	movw	r26, r24
    1578:	cb 01       	movw	r24, r22
    157a:	9c 8b       	std	Y+20, r25	; 0x14
    157c:	8b 8b       	std	Y+19, r24	; 0x13
    157e:	8b 89       	ldd	r24, Y+19	; 0x13
    1580:	9c 89       	ldd	r25, Y+20	; 0x14
    1582:	98 8b       	std	Y+16, r25	; 0x10
    1584:	8f 87       	std	Y+15, r24	; 0x0f
    1586:	8f 85       	ldd	r24, Y+15	; 0x0f
    1588:	98 89       	ldd	r25, Y+16	; 0x10
    158a:	01 97       	sbiw	r24, 0x01	; 1
    158c:	f1 f7       	brne	.-4      	; 0x158a <LEDS_voidFlashing+0x120>
    158e:	98 8b       	std	Y+16, r25	; 0x10
    1590:	8f 87       	std	Y+15, r24	; 0x0f
	{
		LED_voidOn( Led_arr[i] )  ;
	}
	_delay_ms(200);
	for(u8 i =0 ; i < 8 ; i++ )
    1592:	1d 8e       	std	Y+29, r1	; 0x1d
    1594:	13 c0       	rjmp	.+38     	; 0x15bc <LEDS_voidFlashing+0x152>
	{
		LED_voidOff( Led_arr[i] )   ;
    1596:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1598:	28 2f       	mov	r18, r24
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	c9 01       	movw	r24, r18
    159e:	88 0f       	add	r24, r24
    15a0:	99 1f       	adc	r25, r25
    15a2:	82 0f       	add	r24, r18
    15a4:	93 1f       	adc	r25, r19
    15a6:	fc 01       	movw	r30, r24
    15a8:	e4 59       	subi	r30, 0x94	; 148
    15aa:	ff 4f       	sbci	r31, 0xFF	; 255
    15ac:	60 81       	ld	r22, Z
    15ae:	71 81       	ldd	r23, Z+1	; 0x01
    15b0:	82 81       	ldd	r24, Z+2	; 0x02
    15b2:	0e 94 2a 09 	call	0x1254	; 0x1254 <LED_voidOff>
	for(u8 i =0 ; i < 8 ; i++ )
	{
		LED_voidOn( Led_arr[i] )  ;
	}
	_delay_ms(200);
	for(u8 i =0 ; i < 8 ; i++ )
    15b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15b8:	8f 5f       	subi	r24, 0xFF	; 255
    15ba:	8d 8f       	std	Y+29, r24	; 0x1d
    15bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15be:	88 30       	cpi	r24, 0x08	; 8
    15c0:	50 f3       	brcs	.-44     	; 0x1596 <LEDS_voidFlashing+0x12c>
    15c2:	80 e0       	ldi	r24, 0x00	; 0
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	a8 e4       	ldi	r26, 0x48	; 72
    15c8:	b3 e4       	ldi	r27, 0x43	; 67
    15ca:	8b 87       	std	Y+11, r24	; 0x0b
    15cc:	9c 87       	std	Y+12, r25	; 0x0c
    15ce:	ad 87       	std	Y+13, r26	; 0x0d
    15d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    15d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    15d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    15d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    15da:	20 e0       	ldi	r18, 0x00	; 0
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	4a ef       	ldi	r20, 0xFA	; 250
    15e0:	54 e4       	ldi	r21, 0x44	; 68
    15e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e6:	dc 01       	movw	r26, r24
    15e8:	cb 01       	movw	r24, r22
    15ea:	8f 83       	std	Y+7, r24	; 0x07
    15ec:	98 87       	std	Y+8, r25	; 0x08
    15ee:	a9 87       	std	Y+9, r26	; 0x09
    15f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15f2:	6f 81       	ldd	r22, Y+7	; 0x07
    15f4:	78 85       	ldd	r23, Y+8	; 0x08
    15f6:	89 85       	ldd	r24, Y+9	; 0x09
    15f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15fa:	20 e0       	ldi	r18, 0x00	; 0
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	40 e8       	ldi	r20, 0x80	; 128
    1600:	5f e3       	ldi	r21, 0x3F	; 63
    1602:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1606:	88 23       	and	r24, r24
    1608:	2c f4       	brge	.+10     	; 0x1614 <LEDS_voidFlashing+0x1aa>
		__ticks = 1;
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	9e 83       	std	Y+6, r25	; 0x06
    1610:	8d 83       	std	Y+5, r24	; 0x05
    1612:	3f c0       	rjmp	.+126    	; 0x1692 <LEDS_voidFlashing+0x228>
	else if (__tmp > 65535)
    1614:	6f 81       	ldd	r22, Y+7	; 0x07
    1616:	78 85       	ldd	r23, Y+8	; 0x08
    1618:	89 85       	ldd	r24, Y+9	; 0x09
    161a:	9a 85       	ldd	r25, Y+10	; 0x0a
    161c:	20 e0       	ldi	r18, 0x00	; 0
    161e:	3f ef       	ldi	r19, 0xFF	; 255
    1620:	4f e7       	ldi	r20, 0x7F	; 127
    1622:	57 e4       	ldi	r21, 0x47	; 71
    1624:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1628:	18 16       	cp	r1, r24
    162a:	4c f5       	brge	.+82     	; 0x167e <LEDS_voidFlashing+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    162c:	6b 85       	ldd	r22, Y+11	; 0x0b
    162e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1630:	8d 85       	ldd	r24, Y+13	; 0x0d
    1632:	9e 85       	ldd	r25, Y+14	; 0x0e
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	40 e2       	ldi	r20, 0x20	; 32
    163a:	51 e4       	ldi	r21, 0x41	; 65
    163c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1640:	dc 01       	movw	r26, r24
    1642:	cb 01       	movw	r24, r22
    1644:	bc 01       	movw	r22, r24
    1646:	cd 01       	movw	r24, r26
    1648:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    164c:	dc 01       	movw	r26, r24
    164e:	cb 01       	movw	r24, r22
    1650:	9e 83       	std	Y+6, r25	; 0x06
    1652:	8d 83       	std	Y+5, r24	; 0x05
    1654:	0f c0       	rjmp	.+30     	; 0x1674 <LEDS_voidFlashing+0x20a>
    1656:	88 ec       	ldi	r24, 0xC8	; 200
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	9c 83       	std	Y+4, r25	; 0x04
    165c:	8b 83       	std	Y+3, r24	; 0x03
    165e:	8b 81       	ldd	r24, Y+3	; 0x03
    1660:	9c 81       	ldd	r25, Y+4	; 0x04
    1662:	01 97       	sbiw	r24, 0x01	; 1
    1664:	f1 f7       	brne	.-4      	; 0x1662 <LEDS_voidFlashing+0x1f8>
    1666:	9c 83       	std	Y+4, r25	; 0x04
    1668:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    166a:	8d 81       	ldd	r24, Y+5	; 0x05
    166c:	9e 81       	ldd	r25, Y+6	; 0x06
    166e:	01 97       	sbiw	r24, 0x01	; 1
    1670:	9e 83       	std	Y+6, r25	; 0x06
    1672:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1674:	8d 81       	ldd	r24, Y+5	; 0x05
    1676:	9e 81       	ldd	r25, Y+6	; 0x06
    1678:	00 97       	sbiw	r24, 0x00	; 0
    167a:	69 f7       	brne	.-38     	; 0x1656 <LEDS_voidFlashing+0x1ec>
    167c:	14 c0       	rjmp	.+40     	; 0x16a6 <LEDS_voidFlashing+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    167e:	6f 81       	ldd	r22, Y+7	; 0x07
    1680:	78 85       	ldd	r23, Y+8	; 0x08
    1682:	89 85       	ldd	r24, Y+9	; 0x09
    1684:	9a 85       	ldd	r25, Y+10	; 0x0a
    1686:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    168a:	dc 01       	movw	r26, r24
    168c:	cb 01       	movw	r24, r22
    168e:	9e 83       	std	Y+6, r25	; 0x06
    1690:	8d 83       	std	Y+5, r24	; 0x05
    1692:	8d 81       	ldd	r24, Y+5	; 0x05
    1694:	9e 81       	ldd	r25, Y+6	; 0x06
    1696:	9a 83       	std	Y+2, r25	; 0x02
    1698:	89 83       	std	Y+1, r24	; 0x01
    169a:	89 81       	ldd	r24, Y+1	; 0x01
    169c:	9a 81       	ldd	r25, Y+2	; 0x02
    169e:	01 97       	sbiw	r24, 0x01	; 1
    16a0:	f1 f7       	brne	.-4      	; 0x169e <LEDS_voidFlashing+0x234>
    16a2:	9a 83       	std	Y+2, r25	; 0x02
    16a4:	89 83       	std	Y+1, r24	; 0x01
	{
		LED_voidOff( Led_arr[i] )   ;

	}
	_delay_ms(200);
}
    16a6:	6e 96       	adiw	r28, 0x1e	; 30
    16a8:	0f b6       	in	r0, 0x3f	; 63
    16aa:	f8 94       	cli
    16ac:	de bf       	out	0x3e, r29	; 62
    16ae:	0f be       	out	0x3f, r0	; 63
    16b0:	cd bf       	out	0x3d, r28	; 61
    16b2:	cf 91       	pop	r28
    16b4:	df 91       	pop	r29
    16b6:	08 95       	ret

000016b8 <LEDS_voidShiftingL>:
void LEDS_voidShiftingL()
{
    16b8:	df 93       	push	r29
    16ba:	cf 93       	push	r28
    16bc:	cd b7       	in	r28, 0x3d	; 61
    16be:	de b7       	in	r29, 0x3e	; 62
    16c0:	6c 97       	sbiw	r28, 0x1c	; 28
    16c2:	0f b6       	in	r0, 0x3f	; 63
    16c4:	f8 94       	cli
    16c6:	de bf       	out	0x3e, r29	; 62
    16c8:	0f be       	out	0x3f, r0	; 63
    16ca:	cd bf       	out	0x3d, r28	; 61
	for ( i=0;i<8;i++)
    16cc:	10 92 a6 00 	sts	0x00A6, r1
    16d0:	8e c0       	rjmp	.+284    	; 0x17ee <LEDS_voidShiftingL+0x136>
	{
		LED_voidOn(Led_arr[7-i]);
    16d2:	80 91 a6 00 	lds	r24, 0x00A6
    16d6:	28 2f       	mov	r18, r24
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	87 e0       	ldi	r24, 0x07	; 7
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	ac 01       	movw	r20, r24
    16e0:	42 1b       	sub	r20, r18
    16e2:	53 0b       	sbc	r21, r19
    16e4:	9a 01       	movw	r18, r20
    16e6:	c9 01       	movw	r24, r18
    16e8:	88 0f       	add	r24, r24
    16ea:	99 1f       	adc	r25, r25
    16ec:	82 0f       	add	r24, r18
    16ee:	93 1f       	adc	r25, r19
    16f0:	fc 01       	movw	r30, r24
    16f2:	e4 59       	subi	r30, 0x94	; 148
    16f4:	ff 4f       	sbci	r31, 0xFF	; 255
    16f6:	60 81       	ld	r22, Z
    16f8:	71 81       	ldd	r23, Z+1	; 0x01
    16fa:	82 81       	ldd	r24, Z+2	; 0x02
    16fc:	0e 94 08 09 	call	0x1210	; 0x1210 <LED_voidOn>
    1700:	80 e0       	ldi	r24, 0x00	; 0
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	aa e7       	ldi	r26, 0x7A	; 122
    1706:	b3 e4       	ldi	r27, 0x43	; 67
    1708:	89 8f       	std	Y+25, r24	; 0x19
    170a:	9a 8f       	std	Y+26, r25	; 0x1a
    170c:	ab 8f       	std	Y+27, r26	; 0x1b
    170e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1710:	69 8d       	ldd	r22, Y+25	; 0x19
    1712:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1714:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1716:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1718:	20 e0       	ldi	r18, 0x00	; 0
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	4a ef       	ldi	r20, 0xFA	; 250
    171e:	54 e4       	ldi	r21, 0x44	; 68
    1720:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1724:	dc 01       	movw	r26, r24
    1726:	cb 01       	movw	r24, r22
    1728:	8d 8b       	std	Y+21, r24	; 0x15
    172a:	9e 8b       	std	Y+22, r25	; 0x16
    172c:	af 8b       	std	Y+23, r26	; 0x17
    172e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1730:	6d 89       	ldd	r22, Y+21	; 0x15
    1732:	7e 89       	ldd	r23, Y+22	; 0x16
    1734:	8f 89       	ldd	r24, Y+23	; 0x17
    1736:	98 8d       	ldd	r25, Y+24	; 0x18
    1738:	20 e0       	ldi	r18, 0x00	; 0
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	40 e8       	ldi	r20, 0x80	; 128
    173e:	5f e3       	ldi	r21, 0x3F	; 63
    1740:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1744:	88 23       	and	r24, r24
    1746:	2c f4       	brge	.+10     	; 0x1752 <LEDS_voidShiftingL+0x9a>
		__ticks = 1;
    1748:	81 e0       	ldi	r24, 0x01	; 1
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	9c 8b       	std	Y+20, r25	; 0x14
    174e:	8b 8b       	std	Y+19, r24	; 0x13
    1750:	3f c0       	rjmp	.+126    	; 0x17d0 <LEDS_voidShiftingL+0x118>
	else if (__tmp > 65535)
    1752:	6d 89       	ldd	r22, Y+21	; 0x15
    1754:	7e 89       	ldd	r23, Y+22	; 0x16
    1756:	8f 89       	ldd	r24, Y+23	; 0x17
    1758:	98 8d       	ldd	r25, Y+24	; 0x18
    175a:	20 e0       	ldi	r18, 0x00	; 0
    175c:	3f ef       	ldi	r19, 0xFF	; 255
    175e:	4f e7       	ldi	r20, 0x7F	; 127
    1760:	57 e4       	ldi	r21, 0x47	; 71
    1762:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1766:	18 16       	cp	r1, r24
    1768:	4c f5       	brge	.+82     	; 0x17bc <LEDS_voidShiftingL+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    176a:	69 8d       	ldd	r22, Y+25	; 0x19
    176c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    176e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1770:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1772:	20 e0       	ldi	r18, 0x00	; 0
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	40 e2       	ldi	r20, 0x20	; 32
    1778:	51 e4       	ldi	r21, 0x41	; 65
    177a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    177e:	dc 01       	movw	r26, r24
    1780:	cb 01       	movw	r24, r22
    1782:	bc 01       	movw	r22, r24
    1784:	cd 01       	movw	r24, r26
    1786:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    178a:	dc 01       	movw	r26, r24
    178c:	cb 01       	movw	r24, r22
    178e:	9c 8b       	std	Y+20, r25	; 0x14
    1790:	8b 8b       	std	Y+19, r24	; 0x13
    1792:	0f c0       	rjmp	.+30     	; 0x17b2 <LEDS_voidShiftingL+0xfa>
    1794:	88 ec       	ldi	r24, 0xC8	; 200
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	9a 8b       	std	Y+18, r25	; 0x12
    179a:	89 8b       	std	Y+17, r24	; 0x11
    179c:	89 89       	ldd	r24, Y+17	; 0x11
    179e:	9a 89       	ldd	r25, Y+18	; 0x12
    17a0:	01 97       	sbiw	r24, 0x01	; 1
    17a2:	f1 f7       	brne	.-4      	; 0x17a0 <LEDS_voidShiftingL+0xe8>
    17a4:	9a 8b       	std	Y+18, r25	; 0x12
    17a6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17a8:	8b 89       	ldd	r24, Y+19	; 0x13
    17aa:	9c 89       	ldd	r25, Y+20	; 0x14
    17ac:	01 97       	sbiw	r24, 0x01	; 1
    17ae:	9c 8b       	std	Y+20, r25	; 0x14
    17b0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17b2:	8b 89       	ldd	r24, Y+19	; 0x13
    17b4:	9c 89       	ldd	r25, Y+20	; 0x14
    17b6:	00 97       	sbiw	r24, 0x00	; 0
    17b8:	69 f7       	brne	.-38     	; 0x1794 <LEDS_voidShiftingL+0xdc>
    17ba:	14 c0       	rjmp	.+40     	; 0x17e4 <LEDS_voidShiftingL+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17bc:	6d 89       	ldd	r22, Y+21	; 0x15
    17be:	7e 89       	ldd	r23, Y+22	; 0x16
    17c0:	8f 89       	ldd	r24, Y+23	; 0x17
    17c2:	98 8d       	ldd	r25, Y+24	; 0x18
    17c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c8:	dc 01       	movw	r26, r24
    17ca:	cb 01       	movw	r24, r22
    17cc:	9c 8b       	std	Y+20, r25	; 0x14
    17ce:	8b 8b       	std	Y+19, r24	; 0x13
    17d0:	8b 89       	ldd	r24, Y+19	; 0x13
    17d2:	9c 89       	ldd	r25, Y+20	; 0x14
    17d4:	98 8b       	std	Y+16, r25	; 0x10
    17d6:	8f 87       	std	Y+15, r24	; 0x0f
    17d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    17da:	98 89       	ldd	r25, Y+16	; 0x10
    17dc:	01 97       	sbiw	r24, 0x01	; 1
    17de:	f1 f7       	brne	.-4      	; 0x17dc <LEDS_voidShiftingL+0x124>
    17e0:	98 8b       	std	Y+16, r25	; 0x10
    17e2:	8f 87       	std	Y+15, r24	; 0x0f
	}
	_delay_ms(200);
}
void LEDS_voidShiftingL()
{
	for ( i=0;i<8;i++)
    17e4:	80 91 a6 00 	lds	r24, 0x00A6
    17e8:	8f 5f       	subi	r24, 0xFF	; 255
    17ea:	80 93 a6 00 	sts	0x00A6, r24
    17ee:	80 91 a6 00 	lds	r24, 0x00A6
    17f2:	88 30       	cpi	r24, 0x08	; 8
    17f4:	08 f4       	brcc	.+2      	; 0x17f8 <LEDS_voidShiftingL+0x140>
    17f6:	6d cf       	rjmp	.-294    	; 0x16d2 <LEDS_voidShiftingL+0x1a>
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	aa e7       	ldi	r26, 0x7A	; 122
    17fe:	b3 e4       	ldi	r27, 0x43	; 67
    1800:	8b 87       	std	Y+11, r24	; 0x0b
    1802:	9c 87       	std	Y+12, r25	; 0x0c
    1804:	ad 87       	std	Y+13, r26	; 0x0d
    1806:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1808:	6b 85       	ldd	r22, Y+11	; 0x0b
    180a:	7c 85       	ldd	r23, Y+12	; 0x0c
    180c:	8d 85       	ldd	r24, Y+13	; 0x0d
    180e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1810:	20 e0       	ldi	r18, 0x00	; 0
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	4a ef       	ldi	r20, 0xFA	; 250
    1816:	54 e4       	ldi	r21, 0x44	; 68
    1818:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    181c:	dc 01       	movw	r26, r24
    181e:	cb 01       	movw	r24, r22
    1820:	8f 83       	std	Y+7, r24	; 0x07
    1822:	98 87       	std	Y+8, r25	; 0x08
    1824:	a9 87       	std	Y+9, r26	; 0x09
    1826:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1828:	6f 81       	ldd	r22, Y+7	; 0x07
    182a:	78 85       	ldd	r23, Y+8	; 0x08
    182c:	89 85       	ldd	r24, Y+9	; 0x09
    182e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1830:	20 e0       	ldi	r18, 0x00	; 0
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	40 e8       	ldi	r20, 0x80	; 128
    1836:	5f e3       	ldi	r21, 0x3F	; 63
    1838:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    183c:	88 23       	and	r24, r24
    183e:	2c f4       	brge	.+10     	; 0x184a <LEDS_voidShiftingL+0x192>
		__ticks = 1;
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	9e 83       	std	Y+6, r25	; 0x06
    1846:	8d 83       	std	Y+5, r24	; 0x05
    1848:	3f c0       	rjmp	.+126    	; 0x18c8 <LEDS_voidShiftingL+0x210>
	else if (__tmp > 65535)
    184a:	6f 81       	ldd	r22, Y+7	; 0x07
    184c:	78 85       	ldd	r23, Y+8	; 0x08
    184e:	89 85       	ldd	r24, Y+9	; 0x09
    1850:	9a 85       	ldd	r25, Y+10	; 0x0a
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	3f ef       	ldi	r19, 0xFF	; 255
    1856:	4f e7       	ldi	r20, 0x7F	; 127
    1858:	57 e4       	ldi	r21, 0x47	; 71
    185a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    185e:	18 16       	cp	r1, r24
    1860:	4c f5       	brge	.+82     	; 0x18b4 <LEDS_voidShiftingL+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1862:	6b 85       	ldd	r22, Y+11	; 0x0b
    1864:	7c 85       	ldd	r23, Y+12	; 0x0c
    1866:	8d 85       	ldd	r24, Y+13	; 0x0d
    1868:	9e 85       	ldd	r25, Y+14	; 0x0e
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	40 e2       	ldi	r20, 0x20	; 32
    1870:	51 e4       	ldi	r21, 0x41	; 65
    1872:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1876:	dc 01       	movw	r26, r24
    1878:	cb 01       	movw	r24, r22
    187a:	bc 01       	movw	r22, r24
    187c:	cd 01       	movw	r24, r26
    187e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	9e 83       	std	Y+6, r25	; 0x06
    1888:	8d 83       	std	Y+5, r24	; 0x05
    188a:	0f c0       	rjmp	.+30     	; 0x18aa <LEDS_voidShiftingL+0x1f2>
    188c:	88 ec       	ldi	r24, 0xC8	; 200
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	9c 83       	std	Y+4, r25	; 0x04
    1892:	8b 83       	std	Y+3, r24	; 0x03
    1894:	8b 81       	ldd	r24, Y+3	; 0x03
    1896:	9c 81       	ldd	r25, Y+4	; 0x04
    1898:	01 97       	sbiw	r24, 0x01	; 1
    189a:	f1 f7       	brne	.-4      	; 0x1898 <LEDS_voidShiftingL+0x1e0>
    189c:	9c 83       	std	Y+4, r25	; 0x04
    189e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18a0:	8d 81       	ldd	r24, Y+5	; 0x05
    18a2:	9e 81       	ldd	r25, Y+6	; 0x06
    18a4:	01 97       	sbiw	r24, 0x01	; 1
    18a6:	9e 83       	std	Y+6, r25	; 0x06
    18a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18aa:	8d 81       	ldd	r24, Y+5	; 0x05
    18ac:	9e 81       	ldd	r25, Y+6	; 0x06
    18ae:	00 97       	sbiw	r24, 0x00	; 0
    18b0:	69 f7       	brne	.-38     	; 0x188c <LEDS_voidShiftingL+0x1d4>
    18b2:	14 c0       	rjmp	.+40     	; 0x18dc <LEDS_voidShiftingL+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18b4:	6f 81       	ldd	r22, Y+7	; 0x07
    18b6:	78 85       	ldd	r23, Y+8	; 0x08
    18b8:	89 85       	ldd	r24, Y+9	; 0x09
    18ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    18bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c0:	dc 01       	movw	r26, r24
    18c2:	cb 01       	movw	r24, r22
    18c4:	9e 83       	std	Y+6, r25	; 0x06
    18c6:	8d 83       	std	Y+5, r24	; 0x05
    18c8:	8d 81       	ldd	r24, Y+5	; 0x05
    18ca:	9e 81       	ldd	r25, Y+6	; 0x06
    18cc:	9a 83       	std	Y+2, r25	; 0x02
    18ce:	89 83       	std	Y+1, r24	; 0x01
    18d0:	89 81       	ldd	r24, Y+1	; 0x01
    18d2:	9a 81       	ldd	r25, Y+2	; 0x02
    18d4:	01 97       	sbiw	r24, 0x01	; 1
    18d6:	f1 f7       	brne	.-4      	; 0x18d4 <LEDS_voidShiftingL+0x21c>
    18d8:	9a 83       	std	Y+2, r25	; 0x02
    18da:	89 83       	std	Y+1, r24	; 0x01
	{
		LED_voidOn(Led_arr[7-i]);
		_delay_ms(250);
	}
	_delay_ms(250);
	for ( i=0;i<8;i++)
    18dc:	10 92 a6 00 	sts	0x00A6, r1
    18e0:	1c c0       	rjmp	.+56     	; 0x191a <LEDS_voidShiftingL+0x262>
	{
		LED_voidOff(Led_arr[7-i]);
    18e2:	80 91 a6 00 	lds	r24, 0x00A6
    18e6:	28 2f       	mov	r18, r24
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	87 e0       	ldi	r24, 0x07	; 7
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	ac 01       	movw	r20, r24
    18f0:	42 1b       	sub	r20, r18
    18f2:	53 0b       	sbc	r21, r19
    18f4:	9a 01       	movw	r18, r20
    18f6:	c9 01       	movw	r24, r18
    18f8:	88 0f       	add	r24, r24
    18fa:	99 1f       	adc	r25, r25
    18fc:	82 0f       	add	r24, r18
    18fe:	93 1f       	adc	r25, r19
    1900:	fc 01       	movw	r30, r24
    1902:	e4 59       	subi	r30, 0x94	; 148
    1904:	ff 4f       	sbci	r31, 0xFF	; 255
    1906:	60 81       	ld	r22, Z
    1908:	71 81       	ldd	r23, Z+1	; 0x01
    190a:	82 81       	ldd	r24, Z+2	; 0x02
    190c:	0e 94 2a 09 	call	0x1254	; 0x1254 <LED_voidOff>
	{
		LED_voidOn(Led_arr[7-i]);
		_delay_ms(250);
	}
	_delay_ms(250);
	for ( i=0;i<8;i++)
    1910:	80 91 a6 00 	lds	r24, 0x00A6
    1914:	8f 5f       	subi	r24, 0xFF	; 255
    1916:	80 93 a6 00 	sts	0x00A6, r24
    191a:	80 91 a6 00 	lds	r24, 0x00A6
    191e:	88 30       	cpi	r24, 0x08	; 8
    1920:	00 f3       	brcs	.-64     	; 0x18e2 <LEDS_voidShiftingL+0x22a>
	{
		LED_voidOff(Led_arr[7-i]);
	}
}
    1922:	6c 96       	adiw	r28, 0x1c	; 28
    1924:	0f b6       	in	r0, 0x3f	; 63
    1926:	f8 94       	cli
    1928:	de bf       	out	0x3e, r29	; 62
    192a:	0f be       	out	0x3f, r0	; 63
    192c:	cd bf       	out	0x3d, r28	; 61
    192e:	cf 91       	pop	r28
    1930:	df 91       	pop	r29
    1932:	08 95       	ret

00001934 <LEDS_voidShiftingR>:
void LEDS_voidShiftingR()
{
    1934:	df 93       	push	r29
    1936:	cf 93       	push	r28
    1938:	cd b7       	in	r28, 0x3d	; 61
    193a:	de b7       	in	r29, 0x3e	; 62
    193c:	2e 97       	sbiw	r28, 0x0e	; 14
    193e:	0f b6       	in	r0, 0x3f	; 63
    1940:	f8 94       	cli
    1942:	de bf       	out	0x3e, r29	; 62
    1944:	0f be       	out	0x3f, r0	; 63
    1946:	cd bf       	out	0x3d, r28	; 61
	for (i=0;i<8;i++)
    1948:	10 92 a6 00 	sts	0x00A6, r1
    194c:	9f c0       	rjmp	.+318    	; 0x1a8c <LEDS_voidShiftingR+0x158>
	{
		LED_voidOn(Led_arr[i]);
    194e:	80 91 a6 00 	lds	r24, 0x00A6
    1952:	28 2f       	mov	r18, r24
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	c9 01       	movw	r24, r18
    1958:	88 0f       	add	r24, r24
    195a:	99 1f       	adc	r25, r25
    195c:	82 0f       	add	r24, r18
    195e:	93 1f       	adc	r25, r19
    1960:	fc 01       	movw	r30, r24
    1962:	e4 59       	subi	r30, 0x94	; 148
    1964:	ff 4f       	sbci	r31, 0xFF	; 255
    1966:	60 81       	ld	r22, Z
    1968:	71 81       	ldd	r23, Z+1	; 0x01
    196a:	82 81       	ldd	r24, Z+2	; 0x02
    196c:	0e 94 08 09 	call	0x1210	; 0x1210 <LED_voidOn>
		LED_voidOn(Led_arr[7-i]);
    1970:	80 91 a6 00 	lds	r24, 0x00A6
    1974:	28 2f       	mov	r18, r24
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	87 e0       	ldi	r24, 0x07	; 7
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	ac 01       	movw	r20, r24
    197e:	42 1b       	sub	r20, r18
    1980:	53 0b       	sbc	r21, r19
    1982:	9a 01       	movw	r18, r20
    1984:	c9 01       	movw	r24, r18
    1986:	88 0f       	add	r24, r24
    1988:	99 1f       	adc	r25, r25
    198a:	82 0f       	add	r24, r18
    198c:	93 1f       	adc	r25, r19
    198e:	fc 01       	movw	r30, r24
    1990:	e4 59       	subi	r30, 0x94	; 148
    1992:	ff 4f       	sbci	r31, 0xFF	; 255
    1994:	60 81       	ld	r22, Z
    1996:	71 81       	ldd	r23, Z+1	; 0x01
    1998:	82 81       	ldd	r24, Z+2	; 0x02
    199a:	0e 94 08 09 	call	0x1210	; 0x1210 <LED_voidOn>
    199e:	80 e0       	ldi	r24, 0x00	; 0
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	aa e7       	ldi	r26, 0x7A	; 122
    19a4:	b3 e4       	ldi	r27, 0x43	; 67
    19a6:	8b 87       	std	Y+11, r24	; 0x0b
    19a8:	9c 87       	std	Y+12, r25	; 0x0c
    19aa:	ad 87       	std	Y+13, r26	; 0x0d
    19ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    19b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    19b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    19b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	4a ef       	ldi	r20, 0xFA	; 250
    19bc:	54 e4       	ldi	r21, 0x44	; 68
    19be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c2:	dc 01       	movw	r26, r24
    19c4:	cb 01       	movw	r24, r22
    19c6:	8f 83       	std	Y+7, r24	; 0x07
    19c8:	98 87       	std	Y+8, r25	; 0x08
    19ca:	a9 87       	std	Y+9, r26	; 0x09
    19cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19ce:	6f 81       	ldd	r22, Y+7	; 0x07
    19d0:	78 85       	ldd	r23, Y+8	; 0x08
    19d2:	89 85       	ldd	r24, Y+9	; 0x09
    19d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	40 e8       	ldi	r20, 0x80	; 128
    19dc:	5f e3       	ldi	r21, 0x3F	; 63
    19de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19e2:	88 23       	and	r24, r24
    19e4:	2c f4       	brge	.+10     	; 0x19f0 <LEDS_voidShiftingR+0xbc>
		__ticks = 1;
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	9e 83       	std	Y+6, r25	; 0x06
    19ec:	8d 83       	std	Y+5, r24	; 0x05
    19ee:	3f c0       	rjmp	.+126    	; 0x1a6e <LEDS_voidShiftingR+0x13a>
	else if (__tmp > 65535)
    19f0:	6f 81       	ldd	r22, Y+7	; 0x07
    19f2:	78 85       	ldd	r23, Y+8	; 0x08
    19f4:	89 85       	ldd	r24, Y+9	; 0x09
    19f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    19f8:	20 e0       	ldi	r18, 0x00	; 0
    19fa:	3f ef       	ldi	r19, 0xFF	; 255
    19fc:	4f e7       	ldi	r20, 0x7F	; 127
    19fe:	57 e4       	ldi	r21, 0x47	; 71
    1a00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a04:	18 16       	cp	r1, r24
    1a06:	4c f5       	brge	.+82     	; 0x1a5a <LEDS_voidShiftingR+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a08:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	40 e2       	ldi	r20, 0x20	; 32
    1a16:	51 e4       	ldi	r21, 0x41	; 65
    1a18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	cb 01       	movw	r24, r22
    1a20:	bc 01       	movw	r22, r24
    1a22:	cd 01       	movw	r24, r26
    1a24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a28:	dc 01       	movw	r26, r24
    1a2a:	cb 01       	movw	r24, r22
    1a2c:	9e 83       	std	Y+6, r25	; 0x06
    1a2e:	8d 83       	std	Y+5, r24	; 0x05
    1a30:	0f c0       	rjmp	.+30     	; 0x1a50 <LEDS_voidShiftingR+0x11c>
    1a32:	88 ec       	ldi	r24, 0xC8	; 200
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	9c 83       	std	Y+4, r25	; 0x04
    1a38:	8b 83       	std	Y+3, r24	; 0x03
    1a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a3e:	01 97       	sbiw	r24, 0x01	; 1
    1a40:	f1 f7       	brne	.-4      	; 0x1a3e <LEDS_voidShiftingR+0x10a>
    1a42:	9c 83       	std	Y+4, r25	; 0x04
    1a44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a46:	8d 81       	ldd	r24, Y+5	; 0x05
    1a48:	9e 81       	ldd	r25, Y+6	; 0x06
    1a4a:	01 97       	sbiw	r24, 0x01	; 1
    1a4c:	9e 83       	std	Y+6, r25	; 0x06
    1a4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a50:	8d 81       	ldd	r24, Y+5	; 0x05
    1a52:	9e 81       	ldd	r25, Y+6	; 0x06
    1a54:	00 97       	sbiw	r24, 0x00	; 0
    1a56:	69 f7       	brne	.-38     	; 0x1a32 <LEDS_voidShiftingR+0xfe>
    1a58:	14 c0       	rjmp	.+40     	; 0x1a82 <LEDS_voidShiftingR+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a5c:	78 85       	ldd	r23, Y+8	; 0x08
    1a5e:	89 85       	ldd	r24, Y+9	; 0x09
    1a60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a66:	dc 01       	movw	r26, r24
    1a68:	cb 01       	movw	r24, r22
    1a6a:	9e 83       	std	Y+6, r25	; 0x06
    1a6c:	8d 83       	std	Y+5, r24	; 0x05
    1a6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a70:	9e 81       	ldd	r25, Y+6	; 0x06
    1a72:	9a 83       	std	Y+2, r25	; 0x02
    1a74:	89 83       	std	Y+1, r24	; 0x01
    1a76:	89 81       	ldd	r24, Y+1	; 0x01
    1a78:	9a 81       	ldd	r25, Y+2	; 0x02
    1a7a:	01 97       	sbiw	r24, 0x01	; 1
    1a7c:	f1 f7       	brne	.-4      	; 0x1a7a <LEDS_voidShiftingR+0x146>
    1a7e:	9a 83       	std	Y+2, r25	; 0x02
    1a80:	89 83       	std	Y+1, r24	; 0x01
		LED_voidOff(Led_arr[7-i]);
	}
}
void LEDS_voidShiftingR()
{
	for (i=0;i<8;i++)
    1a82:	80 91 a6 00 	lds	r24, 0x00A6
    1a86:	8f 5f       	subi	r24, 0xFF	; 255
    1a88:	80 93 a6 00 	sts	0x00A6, r24
    1a8c:	80 91 a6 00 	lds	r24, 0x00A6
    1a90:	88 30       	cpi	r24, 0x08	; 8
    1a92:	08 f4       	brcc	.+2      	; 0x1a96 <LEDS_voidShiftingR+0x162>
    1a94:	5c cf       	rjmp	.-328    	; 0x194e <LEDS_voidShiftingR+0x1a>
		LED_voidOn(Led_arr[i]);
		LED_voidOn(Led_arr[7-i]);
		_delay_ms(250);

	}
	for (i=0;i<8;i++)
    1a96:	10 92 a6 00 	sts	0x00A6, r1
    1a9a:	2d c0       	rjmp	.+90     	; 0x1af6 <LEDS_voidShiftingR+0x1c2>
	{
		LED_voidOff(Led_arr[i]);
    1a9c:	80 91 a6 00 	lds	r24, 0x00A6
    1aa0:	28 2f       	mov	r18, r24
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	c9 01       	movw	r24, r18
    1aa6:	88 0f       	add	r24, r24
    1aa8:	99 1f       	adc	r25, r25
    1aaa:	82 0f       	add	r24, r18
    1aac:	93 1f       	adc	r25, r19
    1aae:	fc 01       	movw	r30, r24
    1ab0:	e4 59       	subi	r30, 0x94	; 148
    1ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab4:	60 81       	ld	r22, Z
    1ab6:	71 81       	ldd	r23, Z+1	; 0x01
    1ab8:	82 81       	ldd	r24, Z+2	; 0x02
    1aba:	0e 94 2a 09 	call	0x1254	; 0x1254 <LED_voidOff>
		LED_voidOff(Led_arr[7-i]);
    1abe:	80 91 a6 00 	lds	r24, 0x00A6
    1ac2:	28 2f       	mov	r18, r24
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	87 e0       	ldi	r24, 0x07	; 7
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	ac 01       	movw	r20, r24
    1acc:	42 1b       	sub	r20, r18
    1ace:	53 0b       	sbc	r21, r19
    1ad0:	9a 01       	movw	r18, r20
    1ad2:	c9 01       	movw	r24, r18
    1ad4:	88 0f       	add	r24, r24
    1ad6:	99 1f       	adc	r25, r25
    1ad8:	82 0f       	add	r24, r18
    1ada:	93 1f       	adc	r25, r19
    1adc:	fc 01       	movw	r30, r24
    1ade:	e4 59       	subi	r30, 0x94	; 148
    1ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae2:	60 81       	ld	r22, Z
    1ae4:	71 81       	ldd	r23, Z+1	; 0x01
    1ae6:	82 81       	ldd	r24, Z+2	; 0x02
    1ae8:	0e 94 2a 09 	call	0x1254	; 0x1254 <LED_voidOff>
		LED_voidOn(Led_arr[i]);
		LED_voidOn(Led_arr[7-i]);
		_delay_ms(250);

	}
	for (i=0;i<8;i++)
    1aec:	80 91 a6 00 	lds	r24, 0x00A6
    1af0:	8f 5f       	subi	r24, 0xFF	; 255
    1af2:	80 93 a6 00 	sts	0x00A6, r24
    1af6:	80 91 a6 00 	lds	r24, 0x00A6
    1afa:	88 30       	cpi	r24, 0x08	; 8
    1afc:	78 f2       	brcs	.-98     	; 0x1a9c <LEDS_voidShiftingR+0x168>
		LED_voidOff(Led_arr[i]);
		LED_voidOff(Led_arr[7-i]);


	}
}
    1afe:	2e 96       	adiw	r28, 0x0e	; 14
    1b00:	0f b6       	in	r0, 0x3f	; 63
    1b02:	f8 94       	cli
    1b04:	de bf       	out	0x3e, r29	; 62
    1b06:	0f be       	out	0x3f, r0	; 63
    1b08:	cd bf       	out	0x3d, r28	; 61
    1b0a:	cf 91       	pop	r28
    1b0c:	df 91       	pop	r29
    1b0e:	08 95       	ret

00001b10 <LEDS_Converging>:
void LEDS_Converging()
{
    1b10:	df 93       	push	r29
    1b12:	cf 93       	push	r28
    1b14:	cd b7       	in	r28, 0x3d	; 61
    1b16:	de b7       	in	r29, 0x3e	; 62
    1b18:	2e 97       	sbiw	r28, 0x0e	; 14
    1b1a:	0f b6       	in	r0, 0x3f	; 63
    1b1c:	f8 94       	cli
    1b1e:	de bf       	out	0x3e, r29	; 62
    1b20:	0f be       	out	0x3f, r0	; 63
    1b22:	cd bf       	out	0x3d, r28	; 61
	for (i=0;i<4;i++)
    1b24:	10 92 a6 00 	sts	0x00A6, r1
    1b28:	a2 c0       	rjmp	.+324    	; 0x1c6e <LEDS_Converging+0x15e>
	{
		LED_voidOn(Led_arr[3-i]);
    1b2a:	80 91 a6 00 	lds	r24, 0x00A6
    1b2e:	28 2f       	mov	r18, r24
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	83 e0       	ldi	r24, 0x03	; 3
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	ac 01       	movw	r20, r24
    1b38:	42 1b       	sub	r20, r18
    1b3a:	53 0b       	sbc	r21, r19
    1b3c:	9a 01       	movw	r18, r20
    1b3e:	c9 01       	movw	r24, r18
    1b40:	88 0f       	add	r24, r24
    1b42:	99 1f       	adc	r25, r25
    1b44:	82 0f       	add	r24, r18
    1b46:	93 1f       	adc	r25, r19
    1b48:	fc 01       	movw	r30, r24
    1b4a:	e4 59       	subi	r30, 0x94	; 148
    1b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4e:	60 81       	ld	r22, Z
    1b50:	71 81       	ldd	r23, Z+1	; 0x01
    1b52:	82 81       	ldd	r24, Z+2	; 0x02
    1b54:	0e 94 08 09 	call	0x1210	; 0x1210 <LED_voidOn>
		LED_voidOn(Led_arr[4+i]);
    1b58:	80 91 a6 00 	lds	r24, 0x00A6
    1b5c:	88 2f       	mov	r24, r24
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	9c 01       	movw	r18, r24
    1b62:	2c 5f       	subi	r18, 0xFC	; 252
    1b64:	3f 4f       	sbci	r19, 0xFF	; 255
    1b66:	c9 01       	movw	r24, r18
    1b68:	88 0f       	add	r24, r24
    1b6a:	99 1f       	adc	r25, r25
    1b6c:	82 0f       	add	r24, r18
    1b6e:	93 1f       	adc	r25, r19
    1b70:	fc 01       	movw	r30, r24
    1b72:	e4 59       	subi	r30, 0x94	; 148
    1b74:	ff 4f       	sbci	r31, 0xFF	; 255
    1b76:	60 81       	ld	r22, Z
    1b78:	71 81       	ldd	r23, Z+1	; 0x01
    1b7a:	82 81       	ldd	r24, Z+2	; 0x02
    1b7c:	0e 94 08 09 	call	0x1210	; 0x1210 <LED_voidOn>
    1b80:	80 e0       	ldi	r24, 0x00	; 0
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	aa ef       	ldi	r26, 0xFA	; 250
    1b86:	b3 e4       	ldi	r27, 0x43	; 67
    1b88:	8b 87       	std	Y+11, r24	; 0x0b
    1b8a:	9c 87       	std	Y+12, r25	; 0x0c
    1b8c:	ad 87       	std	Y+13, r26	; 0x0d
    1b8e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b90:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b92:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b94:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b96:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	4a ef       	ldi	r20, 0xFA	; 250
    1b9e:	54 e4       	ldi	r21, 0x44	; 68
    1ba0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba4:	dc 01       	movw	r26, r24
    1ba6:	cb 01       	movw	r24, r22
    1ba8:	8f 83       	std	Y+7, r24	; 0x07
    1baa:	98 87       	std	Y+8, r25	; 0x08
    1bac:	a9 87       	std	Y+9, r26	; 0x09
    1bae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bb0:	6f 81       	ldd	r22, Y+7	; 0x07
    1bb2:	78 85       	ldd	r23, Y+8	; 0x08
    1bb4:	89 85       	ldd	r24, Y+9	; 0x09
    1bb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bb8:	20 e0       	ldi	r18, 0x00	; 0
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	40 e8       	ldi	r20, 0x80	; 128
    1bbe:	5f e3       	ldi	r21, 0x3F	; 63
    1bc0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bc4:	88 23       	and	r24, r24
    1bc6:	2c f4       	brge	.+10     	; 0x1bd2 <LEDS_Converging+0xc2>
		__ticks = 1;
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	9e 83       	std	Y+6, r25	; 0x06
    1bce:	8d 83       	std	Y+5, r24	; 0x05
    1bd0:	3f c0       	rjmp	.+126    	; 0x1c50 <LEDS_Converging+0x140>
	else if (__tmp > 65535)
    1bd2:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd4:	78 85       	ldd	r23, Y+8	; 0x08
    1bd6:	89 85       	ldd	r24, Y+9	; 0x09
    1bd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bda:	20 e0       	ldi	r18, 0x00	; 0
    1bdc:	3f ef       	ldi	r19, 0xFF	; 255
    1bde:	4f e7       	ldi	r20, 0x7F	; 127
    1be0:	57 e4       	ldi	r21, 0x47	; 71
    1be2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1be6:	18 16       	cp	r1, r24
    1be8:	4c f5       	brge	.+82     	; 0x1c3c <LEDS_Converging+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bea:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bec:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bee:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bf0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	40 e2       	ldi	r20, 0x20	; 32
    1bf8:	51 e4       	ldi	r21, 0x41	; 65
    1bfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfe:	dc 01       	movw	r26, r24
    1c00:	cb 01       	movw	r24, r22
    1c02:	bc 01       	movw	r22, r24
    1c04:	cd 01       	movw	r24, r26
    1c06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c0a:	dc 01       	movw	r26, r24
    1c0c:	cb 01       	movw	r24, r22
    1c0e:	9e 83       	std	Y+6, r25	; 0x06
    1c10:	8d 83       	std	Y+5, r24	; 0x05
    1c12:	0f c0       	rjmp	.+30     	; 0x1c32 <LEDS_Converging+0x122>
    1c14:	88 ec       	ldi	r24, 0xC8	; 200
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	9c 83       	std	Y+4, r25	; 0x04
    1c1a:	8b 83       	std	Y+3, r24	; 0x03
    1c1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c20:	01 97       	sbiw	r24, 0x01	; 1
    1c22:	f1 f7       	brne	.-4      	; 0x1c20 <LEDS_Converging+0x110>
    1c24:	9c 83       	std	Y+4, r25	; 0x04
    1c26:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c28:	8d 81       	ldd	r24, Y+5	; 0x05
    1c2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c2c:	01 97       	sbiw	r24, 0x01	; 1
    1c2e:	9e 83       	std	Y+6, r25	; 0x06
    1c30:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c32:	8d 81       	ldd	r24, Y+5	; 0x05
    1c34:	9e 81       	ldd	r25, Y+6	; 0x06
    1c36:	00 97       	sbiw	r24, 0x00	; 0
    1c38:	69 f7       	brne	.-38     	; 0x1c14 <LEDS_Converging+0x104>
    1c3a:	14 c0       	rjmp	.+40     	; 0x1c64 <LEDS_Converging+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c3e:	78 85       	ldd	r23, Y+8	; 0x08
    1c40:	89 85       	ldd	r24, Y+9	; 0x09
    1c42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c48:	dc 01       	movw	r26, r24
    1c4a:	cb 01       	movw	r24, r22
    1c4c:	9e 83       	std	Y+6, r25	; 0x06
    1c4e:	8d 83       	std	Y+5, r24	; 0x05
    1c50:	8d 81       	ldd	r24, Y+5	; 0x05
    1c52:	9e 81       	ldd	r25, Y+6	; 0x06
    1c54:	9a 83       	std	Y+2, r25	; 0x02
    1c56:	89 83       	std	Y+1, r24	; 0x01
    1c58:	89 81       	ldd	r24, Y+1	; 0x01
    1c5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c5c:	01 97       	sbiw	r24, 0x01	; 1
    1c5e:	f1 f7       	brne	.-4      	; 0x1c5c <LEDS_Converging+0x14c>
    1c60:	9a 83       	std	Y+2, r25	; 0x02
    1c62:	89 83       	std	Y+1, r24	; 0x01

	}
}
void LEDS_Converging()
{
	for (i=0;i<4;i++)
    1c64:	80 91 a6 00 	lds	r24, 0x00A6
    1c68:	8f 5f       	subi	r24, 0xFF	; 255
    1c6a:	80 93 a6 00 	sts	0x00A6, r24
    1c6e:	80 91 a6 00 	lds	r24, 0x00A6
    1c72:	84 30       	cpi	r24, 0x04	; 4
    1c74:	08 f4       	brcc	.+2      	; 0x1c78 <LEDS_Converging+0x168>
    1c76:	59 cf       	rjmp	.-334    	; 0x1b2a <LEDS_Converging+0x1a>
		LED_voidOn(Led_arr[3-i]);
		LED_voidOn(Led_arr[4+i]);
		_delay_ms(500);
	}

	for (i=0;i<8;i++)
    1c78:	10 92 a6 00 	sts	0x00A6, r1
    1c7c:	16 c0       	rjmp	.+44     	; 0x1caa <LEDS_Converging+0x19a>
	{
		LED_voidOff(Led_arr[i]);
    1c7e:	80 91 a6 00 	lds	r24, 0x00A6
    1c82:	28 2f       	mov	r18, r24
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	c9 01       	movw	r24, r18
    1c88:	88 0f       	add	r24, r24
    1c8a:	99 1f       	adc	r25, r25
    1c8c:	82 0f       	add	r24, r18
    1c8e:	93 1f       	adc	r25, r19
    1c90:	fc 01       	movw	r30, r24
    1c92:	e4 59       	subi	r30, 0x94	; 148
    1c94:	ff 4f       	sbci	r31, 0xFF	; 255
    1c96:	60 81       	ld	r22, Z
    1c98:	71 81       	ldd	r23, Z+1	; 0x01
    1c9a:	82 81       	ldd	r24, Z+2	; 0x02
    1c9c:	0e 94 2a 09 	call	0x1254	; 0x1254 <LED_voidOff>
		LED_voidOn(Led_arr[3-i]);
		LED_voidOn(Led_arr[4+i]);
		_delay_ms(500);
	}

	for (i=0;i<8;i++)
    1ca0:	80 91 a6 00 	lds	r24, 0x00A6
    1ca4:	8f 5f       	subi	r24, 0xFF	; 255
    1ca6:	80 93 a6 00 	sts	0x00A6, r24
    1caa:	80 91 a6 00 	lds	r24, 0x00A6
    1cae:	88 30       	cpi	r24, 0x08	; 8
    1cb0:	30 f3       	brcs	.-52     	; 0x1c7e <LEDS_Converging+0x16e>
	{
		LED_voidOff(Led_arr[i]);
	}
}
    1cb2:	2e 96       	adiw	r28, 0x0e	; 14
    1cb4:	0f b6       	in	r0, 0x3f	; 63
    1cb6:	f8 94       	cli
    1cb8:	de bf       	out	0x3e, r29	; 62
    1cba:	0f be       	out	0x3f, r0	; 63
    1cbc:	cd bf       	out	0x3d, r28	; 61
    1cbe:	cf 91       	pop	r28
    1cc0:	df 91       	pop	r29
    1cc2:	08 95       	ret

00001cc4 <LEDS_Diverging>:
void LEDS_Diverging()
{
    1cc4:	df 93       	push	r29
    1cc6:	cf 93       	push	r28
    1cc8:	cd b7       	in	r28, 0x3d	; 61
    1cca:	de b7       	in	r29, 0x3e	; 62
    1ccc:	6e 97       	sbiw	r28, 0x1e	; 30
    1cce:	0f b6       	in	r0, 0x3f	; 63
    1cd0:	f8 94       	cli
    1cd2:	de bf       	out	0x3e, r29	; 62
    1cd4:	0f be       	out	0x3f, r0	; 63
    1cd6:	cd bf       	out	0x3d, r28	; 61
	for (u8 i = 0; i <= ((8) / 2); i++) {
    1cd8:	1e 8e       	std	Y+30, r1	; 0x1e
    1cda:	2d c1       	rjmp	.+602    	; 0x1f36 <LEDS_Diverging+0x272>
		if (i < 4) {
    1cdc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1cde:	84 30       	cpi	r24, 0x04	; 4
    1ce0:	08 f0       	brcs	.+2      	; 0x1ce4 <LEDS_Diverging+0x20>
    1ce2:	0e c1       	rjmp	.+540    	; 0x1f00 <LEDS_Diverging+0x23c>
    1ce4:	80 e0       	ldi	r24, 0x00	; 0
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	a6 e9       	ldi	r26, 0x96	; 150
    1cea:	b3 e4       	ldi	r27, 0x43	; 67
    1cec:	89 8f       	std	Y+25, r24	; 0x19
    1cee:	9a 8f       	std	Y+26, r25	; 0x1a
    1cf0:	ab 8f       	std	Y+27, r26	; 0x1b
    1cf2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cf4:	69 8d       	ldd	r22, Y+25	; 0x19
    1cf6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cf8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cfa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	4a ef       	ldi	r20, 0xFA	; 250
    1d02:	54 e4       	ldi	r21, 0x44	; 68
    1d04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d08:	dc 01       	movw	r26, r24
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	8d 8b       	std	Y+21, r24	; 0x15
    1d0e:	9e 8b       	std	Y+22, r25	; 0x16
    1d10:	af 8b       	std	Y+23, r26	; 0x17
    1d12:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d14:	6d 89       	ldd	r22, Y+21	; 0x15
    1d16:	7e 89       	ldd	r23, Y+22	; 0x16
    1d18:	8f 89       	ldd	r24, Y+23	; 0x17
    1d1a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	40 e8       	ldi	r20, 0x80	; 128
    1d22:	5f e3       	ldi	r21, 0x3F	; 63
    1d24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d28:	88 23       	and	r24, r24
    1d2a:	2c f4       	brge	.+10     	; 0x1d36 <LEDS_Diverging+0x72>
		__ticks = 1;
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	9c 8b       	std	Y+20, r25	; 0x14
    1d32:	8b 8b       	std	Y+19, r24	; 0x13
    1d34:	3f c0       	rjmp	.+126    	; 0x1db4 <LEDS_Diverging+0xf0>
	else if (__tmp > 65535)
    1d36:	6d 89       	ldd	r22, Y+21	; 0x15
    1d38:	7e 89       	ldd	r23, Y+22	; 0x16
    1d3a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d3c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d3e:	20 e0       	ldi	r18, 0x00	; 0
    1d40:	3f ef       	ldi	r19, 0xFF	; 255
    1d42:	4f e7       	ldi	r20, 0x7F	; 127
    1d44:	57 e4       	ldi	r21, 0x47	; 71
    1d46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d4a:	18 16       	cp	r1, r24
    1d4c:	4c f5       	brge	.+82     	; 0x1da0 <LEDS_Diverging+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d4e:	69 8d       	ldd	r22, Y+25	; 0x19
    1d50:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d52:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d54:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	40 e2       	ldi	r20, 0x20	; 32
    1d5c:	51 e4       	ldi	r21, 0x41	; 65
    1d5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d62:	dc 01       	movw	r26, r24
    1d64:	cb 01       	movw	r24, r22
    1d66:	bc 01       	movw	r22, r24
    1d68:	cd 01       	movw	r24, r26
    1d6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d6e:	dc 01       	movw	r26, r24
    1d70:	cb 01       	movw	r24, r22
    1d72:	9c 8b       	std	Y+20, r25	; 0x14
    1d74:	8b 8b       	std	Y+19, r24	; 0x13
    1d76:	0f c0       	rjmp	.+30     	; 0x1d96 <LEDS_Diverging+0xd2>
    1d78:	88 ec       	ldi	r24, 0xC8	; 200
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	9a 8b       	std	Y+18, r25	; 0x12
    1d7e:	89 8b       	std	Y+17, r24	; 0x11
    1d80:	89 89       	ldd	r24, Y+17	; 0x11
    1d82:	9a 89       	ldd	r25, Y+18	; 0x12
    1d84:	01 97       	sbiw	r24, 0x01	; 1
    1d86:	f1 f7       	brne	.-4      	; 0x1d84 <LEDS_Diverging+0xc0>
    1d88:	9a 8b       	std	Y+18, r25	; 0x12
    1d8a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d8c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d8e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d90:	01 97       	sbiw	r24, 0x01	; 1
    1d92:	9c 8b       	std	Y+20, r25	; 0x14
    1d94:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d96:	8b 89       	ldd	r24, Y+19	; 0x13
    1d98:	9c 89       	ldd	r25, Y+20	; 0x14
    1d9a:	00 97       	sbiw	r24, 0x00	; 0
    1d9c:	69 f7       	brne	.-38     	; 0x1d78 <LEDS_Diverging+0xb4>
    1d9e:	14 c0       	rjmp	.+40     	; 0x1dc8 <LEDS_Diverging+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1da0:	6d 89       	ldd	r22, Y+21	; 0x15
    1da2:	7e 89       	ldd	r23, Y+22	; 0x16
    1da4:	8f 89       	ldd	r24, Y+23	; 0x17
    1da6:	98 8d       	ldd	r25, Y+24	; 0x18
    1da8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dac:	dc 01       	movw	r26, r24
    1dae:	cb 01       	movw	r24, r22
    1db0:	9c 8b       	std	Y+20, r25	; 0x14
    1db2:	8b 8b       	std	Y+19, r24	; 0x13
    1db4:	8b 89       	ldd	r24, Y+19	; 0x13
    1db6:	9c 89       	ldd	r25, Y+20	; 0x14
    1db8:	98 8b       	std	Y+16, r25	; 0x10
    1dba:	8f 87       	std	Y+15, r24	; 0x0f
    1dbc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dbe:	98 89       	ldd	r25, Y+16	; 0x10
    1dc0:	01 97       	sbiw	r24, 0x01	; 1
    1dc2:	f1 f7       	brne	.-4      	; 0x1dc0 <LEDS_Diverging+0xfc>
    1dc4:	98 8b       	std	Y+16, r25	; 0x10
    1dc6:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(300);
			LED_voidOn(Led_arr[3 - i]);
    1dc8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1dca:	28 2f       	mov	r18, r24
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	83 e0       	ldi	r24, 0x03	; 3
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	ac 01       	movw	r20, r24
    1dd4:	42 1b       	sub	r20, r18
    1dd6:	53 0b       	sbc	r21, r19
    1dd8:	9a 01       	movw	r18, r20
    1dda:	c9 01       	movw	r24, r18
    1ddc:	88 0f       	add	r24, r24
    1dde:	99 1f       	adc	r25, r25
    1de0:	82 0f       	add	r24, r18
    1de2:	93 1f       	adc	r25, r19
    1de4:	fc 01       	movw	r30, r24
    1de6:	e4 59       	subi	r30, 0x94	; 148
    1de8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dea:	60 81       	ld	r22, Z
    1dec:	71 81       	ldd	r23, Z+1	; 0x01
    1dee:	82 81       	ldd	r24, Z+2	; 0x02
    1df0:	0e 94 08 09 	call	0x1210	; 0x1210 <LED_voidOn>
			LED_voidOn(Led_arr[4 + i]);
    1df4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1df6:	88 2f       	mov	r24, r24
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	9c 01       	movw	r18, r24
    1dfc:	2c 5f       	subi	r18, 0xFC	; 252
    1dfe:	3f 4f       	sbci	r19, 0xFF	; 255
    1e00:	c9 01       	movw	r24, r18
    1e02:	88 0f       	add	r24, r24
    1e04:	99 1f       	adc	r25, r25
    1e06:	82 0f       	add	r24, r18
    1e08:	93 1f       	adc	r25, r19
    1e0a:	fc 01       	movw	r30, r24
    1e0c:	e4 59       	subi	r30, 0x94	; 148
    1e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e10:	60 81       	ld	r22, Z
    1e12:	71 81       	ldd	r23, Z+1	; 0x01
    1e14:	82 81       	ldd	r24, Z+2	; 0x02
    1e16:	0e 94 08 09 	call	0x1210	; 0x1210 <LED_voidOn>
    1e1a:	80 e0       	ldi	r24, 0x00	; 0
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	a6 e9       	ldi	r26, 0x96	; 150
    1e20:	b3 e4       	ldi	r27, 0x43	; 67
    1e22:	8b 87       	std	Y+11, r24	; 0x0b
    1e24:	9c 87       	std	Y+12, r25	; 0x0c
    1e26:	ad 87       	std	Y+13, r26	; 0x0d
    1e28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e30:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e32:	20 e0       	ldi	r18, 0x00	; 0
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	4a ef       	ldi	r20, 0xFA	; 250
    1e38:	54 e4       	ldi	r21, 0x44	; 68
    1e3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e3e:	dc 01       	movw	r26, r24
    1e40:	cb 01       	movw	r24, r22
    1e42:	8f 83       	std	Y+7, r24	; 0x07
    1e44:	98 87       	std	Y+8, r25	; 0x08
    1e46:	a9 87       	std	Y+9, r26	; 0x09
    1e48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e4c:	78 85       	ldd	r23, Y+8	; 0x08
    1e4e:	89 85       	ldd	r24, Y+9	; 0x09
    1e50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e52:	20 e0       	ldi	r18, 0x00	; 0
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	40 e8       	ldi	r20, 0x80	; 128
    1e58:	5f e3       	ldi	r21, 0x3F	; 63
    1e5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e5e:	88 23       	and	r24, r24
    1e60:	2c f4       	brge	.+10     	; 0x1e6c <LEDS_Diverging+0x1a8>
		__ticks = 1;
    1e62:	81 e0       	ldi	r24, 0x01	; 1
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	9e 83       	std	Y+6, r25	; 0x06
    1e68:	8d 83       	std	Y+5, r24	; 0x05
    1e6a:	3f c0       	rjmp	.+126    	; 0x1eea <LEDS_Diverging+0x226>
	else if (__tmp > 65535)
    1e6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e6e:	78 85       	ldd	r23, Y+8	; 0x08
    1e70:	89 85       	ldd	r24, Y+9	; 0x09
    1e72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	3f ef       	ldi	r19, 0xFF	; 255
    1e78:	4f e7       	ldi	r20, 0x7F	; 127
    1e7a:	57 e4       	ldi	r21, 0x47	; 71
    1e7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e80:	18 16       	cp	r1, r24
    1e82:	4c f5       	brge	.+82     	; 0x1ed6 <LEDS_Diverging+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e84:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e86:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e88:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e8c:	20 e0       	ldi	r18, 0x00	; 0
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	40 e2       	ldi	r20, 0x20	; 32
    1e92:	51 e4       	ldi	r21, 0x41	; 65
    1e94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e98:	dc 01       	movw	r26, r24
    1e9a:	cb 01       	movw	r24, r22
    1e9c:	bc 01       	movw	r22, r24
    1e9e:	cd 01       	movw	r24, r26
    1ea0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea4:	dc 01       	movw	r26, r24
    1ea6:	cb 01       	movw	r24, r22
    1ea8:	9e 83       	std	Y+6, r25	; 0x06
    1eaa:	8d 83       	std	Y+5, r24	; 0x05
    1eac:	0f c0       	rjmp	.+30     	; 0x1ecc <LEDS_Diverging+0x208>
    1eae:	88 ec       	ldi	r24, 0xC8	; 200
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	9c 83       	std	Y+4, r25	; 0x04
    1eb4:	8b 83       	std	Y+3, r24	; 0x03
    1eb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eba:	01 97       	sbiw	r24, 0x01	; 1
    1ebc:	f1 f7       	brne	.-4      	; 0x1eba <LEDS_Diverging+0x1f6>
    1ebe:	9c 83       	std	Y+4, r25	; 0x04
    1ec0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ec2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec6:	01 97       	sbiw	r24, 0x01	; 1
    1ec8:	9e 83       	std	Y+6, r25	; 0x06
    1eca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ecc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ece:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed0:	00 97       	sbiw	r24, 0x00	; 0
    1ed2:	69 f7       	brne	.-38     	; 0x1eae <LEDS_Diverging+0x1ea>
    1ed4:	2d c0       	rjmp	.+90     	; 0x1f30 <LEDS_Diverging+0x26c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ed6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed8:	78 85       	ldd	r23, Y+8	; 0x08
    1eda:	89 85       	ldd	r24, Y+9	; 0x09
    1edc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ede:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	9e 83       	std	Y+6, r25	; 0x06
    1ee8:	8d 83       	std	Y+5, r24	; 0x05
    1eea:	8d 81       	ldd	r24, Y+5	; 0x05
    1eec:	9e 81       	ldd	r25, Y+6	; 0x06
    1eee:	9a 83       	std	Y+2, r25	; 0x02
    1ef0:	89 83       	std	Y+1, r24	; 0x01
    1ef2:	89 81       	ldd	r24, Y+1	; 0x01
    1ef4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef6:	01 97       	sbiw	r24, 0x01	; 1
    1ef8:	f1 f7       	brne	.-4      	; 0x1ef6 <LEDS_Diverging+0x232>
    1efa:	9a 83       	std	Y+2, r25	; 0x02
    1efc:	89 83       	std	Y+1, r24	; 0x01
    1efe:	18 c0       	rjmp	.+48     	; 0x1f30 <LEDS_Diverging+0x26c>
			_delay_ms(300);
		} else {
			for (u8 j = 0; j < 8; j++) {
    1f00:	1d 8e       	std	Y+29, r1	; 0x1d
    1f02:	13 c0       	rjmp	.+38     	; 0x1f2a <LEDS_Diverging+0x266>
				LED_voidOff(Led_arr[j]);
    1f04:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f06:	28 2f       	mov	r18, r24
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	c9 01       	movw	r24, r18
    1f0c:	88 0f       	add	r24, r24
    1f0e:	99 1f       	adc	r25, r25
    1f10:	82 0f       	add	r24, r18
    1f12:	93 1f       	adc	r25, r19
    1f14:	fc 01       	movw	r30, r24
    1f16:	e4 59       	subi	r30, 0x94	; 148
    1f18:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1a:	60 81       	ld	r22, Z
    1f1c:	71 81       	ldd	r23, Z+1	; 0x01
    1f1e:	82 81       	ldd	r24, Z+2	; 0x02
    1f20:	0e 94 2a 09 	call	0x1254	; 0x1254 <LED_voidOff>
			_delay_ms(300);
			LED_voidOn(Led_arr[3 - i]);
			LED_voidOn(Led_arr[4 + i]);
			_delay_ms(300);
		} else {
			for (u8 j = 0; j < 8; j++) {
    1f24:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f26:	8f 5f       	subi	r24, 0xFF	; 255
    1f28:	8d 8f       	std	Y+29, r24	; 0x1d
    1f2a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f2c:	88 30       	cpi	r24, 0x08	; 8
    1f2e:	50 f3       	brcs	.-44     	; 0x1f04 <LEDS_Diverging+0x240>
		LED_voidOff(Led_arr[i]);
	}
}
void LEDS_Diverging()
{
	for (u8 i = 0; i <= ((8) / 2); i++) {
    1f30:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f32:	8f 5f       	subi	r24, 0xFF	; 255
    1f34:	8e 8f       	std	Y+30, r24	; 0x1e
    1f36:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f38:	85 30       	cpi	r24, 0x05	; 5
    1f3a:	08 f4       	brcc	.+2      	; 0x1f3e <LEDS_Diverging+0x27a>
    1f3c:	cf ce       	rjmp	.-610    	; 0x1cdc <LEDS_Diverging+0x18>
			for (u8 j = 0; j < 8; j++) {
				LED_voidOff(Led_arr[j]);
			}
		}
	}
}
    1f3e:	6e 96       	adiw	r28, 0x1e	; 30
    1f40:	0f b6       	in	r0, 0x3f	; 63
    1f42:	f8 94       	cli
    1f44:	de bf       	out	0x3e, r29	; 62
    1f46:	0f be       	out	0x3f, r0	; 63
    1f48:	cd bf       	out	0x3d, r28	; 61
    1f4a:	cf 91       	pop	r28
    1f4c:	df 91       	pop	r29
    1f4e:	08 95       	ret

00001f50 <LEDS_Ping_Pong_Effect>:
void LEDS_Ping_Pong_Effect()
{
    1f50:	df 93       	push	r29
    1f52:	cf 93       	push	r28
    1f54:	cd b7       	in	r28, 0x3d	; 61
    1f56:	de b7       	in	r29, 0x3e	; 62
    1f58:	ec 97       	sbiw	r28, 0x3c	; 60
    1f5a:	0f b6       	in	r0, 0x3f	; 63
    1f5c:	f8 94       	cli
    1f5e:	de bf       	out	0x3e, r29	; 62
    1f60:	0f be       	out	0x3f, r0	; 63
    1f62:	cd bf       	out	0x3d, r28	; 61
	for (u8 i = 0; i < 8; i++) {
    1f64:	1c ae       	std	Y+60, r1	; 0x3c
    1f66:	f7 c0       	rjmp	.+494    	; 0x2156 <LEDS_Ping_Pong_Effect+0x206>
    1f68:	80 e0       	ldi	r24, 0x00	; 0
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	aa e7       	ldi	r26, 0x7A	; 122
    1f6e:	b3 e4       	ldi	r27, 0x43	; 67
    1f70:	8d ab       	std	Y+53, r24	; 0x35
    1f72:	9e ab       	std	Y+54, r25	; 0x36
    1f74:	af ab       	std	Y+55, r26	; 0x37
    1f76:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f78:	6d a9       	ldd	r22, Y+53	; 0x35
    1f7a:	7e a9       	ldd	r23, Y+54	; 0x36
    1f7c:	8f a9       	ldd	r24, Y+55	; 0x37
    1f7e:	98 ad       	ldd	r25, Y+56	; 0x38
    1f80:	20 e0       	ldi	r18, 0x00	; 0
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	4a ef       	ldi	r20, 0xFA	; 250
    1f86:	54 e4       	ldi	r21, 0x44	; 68
    1f88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f8c:	dc 01       	movw	r26, r24
    1f8e:	cb 01       	movw	r24, r22
    1f90:	89 ab       	std	Y+49, r24	; 0x31
    1f92:	9a ab       	std	Y+50, r25	; 0x32
    1f94:	ab ab       	std	Y+51, r26	; 0x33
    1f96:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f98:	69 a9       	ldd	r22, Y+49	; 0x31
    1f9a:	7a a9       	ldd	r23, Y+50	; 0x32
    1f9c:	8b a9       	ldd	r24, Y+51	; 0x33
    1f9e:	9c a9       	ldd	r25, Y+52	; 0x34
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	40 e8       	ldi	r20, 0x80	; 128
    1fa6:	5f e3       	ldi	r21, 0x3F	; 63
    1fa8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fac:	88 23       	and	r24, r24
    1fae:	2c f4       	brge	.+10     	; 0x1fba <LEDS_Ping_Pong_Effect+0x6a>
		__ticks = 1;
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	98 ab       	std	Y+48, r25	; 0x30
    1fb6:	8f a7       	std	Y+47, r24	; 0x2f
    1fb8:	3f c0       	rjmp	.+126    	; 0x2038 <LEDS_Ping_Pong_Effect+0xe8>
	else if (__tmp > 65535)
    1fba:	69 a9       	ldd	r22, Y+49	; 0x31
    1fbc:	7a a9       	ldd	r23, Y+50	; 0x32
    1fbe:	8b a9       	ldd	r24, Y+51	; 0x33
    1fc0:	9c a9       	ldd	r25, Y+52	; 0x34
    1fc2:	20 e0       	ldi	r18, 0x00	; 0
    1fc4:	3f ef       	ldi	r19, 0xFF	; 255
    1fc6:	4f e7       	ldi	r20, 0x7F	; 127
    1fc8:	57 e4       	ldi	r21, 0x47	; 71
    1fca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fce:	18 16       	cp	r1, r24
    1fd0:	4c f5       	brge	.+82     	; 0x2024 <LEDS_Ping_Pong_Effect+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fd2:	6d a9       	ldd	r22, Y+53	; 0x35
    1fd4:	7e a9       	ldd	r23, Y+54	; 0x36
    1fd6:	8f a9       	ldd	r24, Y+55	; 0x37
    1fd8:	98 ad       	ldd	r25, Y+56	; 0x38
    1fda:	20 e0       	ldi	r18, 0x00	; 0
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	40 e2       	ldi	r20, 0x20	; 32
    1fe0:	51 e4       	ldi	r21, 0x41	; 65
    1fe2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	bc 01       	movw	r22, r24
    1fec:	cd 01       	movw	r24, r26
    1fee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff2:	dc 01       	movw	r26, r24
    1ff4:	cb 01       	movw	r24, r22
    1ff6:	98 ab       	std	Y+48, r25	; 0x30
    1ff8:	8f a7       	std	Y+47, r24	; 0x2f
    1ffa:	0f c0       	rjmp	.+30     	; 0x201a <LEDS_Ping_Pong_Effect+0xca>
    1ffc:	88 ec       	ldi	r24, 0xC8	; 200
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	9e a7       	std	Y+46, r25	; 0x2e
    2002:	8d a7       	std	Y+45, r24	; 0x2d
    2004:	8d a5       	ldd	r24, Y+45	; 0x2d
    2006:	9e a5       	ldd	r25, Y+46	; 0x2e
    2008:	01 97       	sbiw	r24, 0x01	; 1
    200a:	f1 f7       	brne	.-4      	; 0x2008 <LEDS_Ping_Pong_Effect+0xb8>
    200c:	9e a7       	std	Y+46, r25	; 0x2e
    200e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2010:	8f a5       	ldd	r24, Y+47	; 0x2f
    2012:	98 a9       	ldd	r25, Y+48	; 0x30
    2014:	01 97       	sbiw	r24, 0x01	; 1
    2016:	98 ab       	std	Y+48, r25	; 0x30
    2018:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    201a:	8f a5       	ldd	r24, Y+47	; 0x2f
    201c:	98 a9       	ldd	r25, Y+48	; 0x30
    201e:	00 97       	sbiw	r24, 0x00	; 0
    2020:	69 f7       	brne	.-38     	; 0x1ffc <LEDS_Ping_Pong_Effect+0xac>
    2022:	14 c0       	rjmp	.+40     	; 0x204c <LEDS_Ping_Pong_Effect+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2024:	69 a9       	ldd	r22, Y+49	; 0x31
    2026:	7a a9       	ldd	r23, Y+50	; 0x32
    2028:	8b a9       	ldd	r24, Y+51	; 0x33
    202a:	9c a9       	ldd	r25, Y+52	; 0x34
    202c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2030:	dc 01       	movw	r26, r24
    2032:	cb 01       	movw	r24, r22
    2034:	98 ab       	std	Y+48, r25	; 0x30
    2036:	8f a7       	std	Y+47, r24	; 0x2f
    2038:	8f a5       	ldd	r24, Y+47	; 0x2f
    203a:	98 a9       	ldd	r25, Y+48	; 0x30
    203c:	9c a7       	std	Y+44, r25	; 0x2c
    203e:	8b a7       	std	Y+43, r24	; 0x2b
    2040:	8b a5       	ldd	r24, Y+43	; 0x2b
    2042:	9c a5       	ldd	r25, Y+44	; 0x2c
    2044:	01 97       	sbiw	r24, 0x01	; 1
    2046:	f1 f7       	brne	.-4      	; 0x2044 <LEDS_Ping_Pong_Effect+0xf4>
    2048:	9c a7       	std	Y+44, r25	; 0x2c
    204a:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(250);
		LED_voidOn(Led_arr[i]);
    204c:	8c ad       	ldd	r24, Y+60	; 0x3c
    204e:	28 2f       	mov	r18, r24
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	c9 01       	movw	r24, r18
    2054:	88 0f       	add	r24, r24
    2056:	99 1f       	adc	r25, r25
    2058:	82 0f       	add	r24, r18
    205a:	93 1f       	adc	r25, r19
    205c:	fc 01       	movw	r30, r24
    205e:	e4 59       	subi	r30, 0x94	; 148
    2060:	ff 4f       	sbci	r31, 0xFF	; 255
    2062:	60 81       	ld	r22, Z
    2064:	71 81       	ldd	r23, Z+1	; 0x01
    2066:	82 81       	ldd	r24, Z+2	; 0x02
    2068:	0e 94 08 09 	call	0x1210	; 0x1210 <LED_voidOn>
    206c:	80 e0       	ldi	r24, 0x00	; 0
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	aa e7       	ldi	r26, 0x7A	; 122
    2072:	b3 e4       	ldi	r27, 0x43	; 67
    2074:	8f a3       	std	Y+39, r24	; 0x27
    2076:	98 a7       	std	Y+40, r25	; 0x28
    2078:	a9 a7       	std	Y+41, r26	; 0x29
    207a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    207c:	6f a1       	ldd	r22, Y+39	; 0x27
    207e:	78 a5       	ldd	r23, Y+40	; 0x28
    2080:	89 a5       	ldd	r24, Y+41	; 0x29
    2082:	9a a5       	ldd	r25, Y+42	; 0x2a
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	4a ef       	ldi	r20, 0xFA	; 250
    208a:	54 e4       	ldi	r21, 0x44	; 68
    208c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	8b a3       	std	Y+35, r24	; 0x23
    2096:	9c a3       	std	Y+36, r25	; 0x24
    2098:	ad a3       	std	Y+37, r26	; 0x25
    209a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    209c:	6b a1       	ldd	r22, Y+35	; 0x23
    209e:	7c a1       	ldd	r23, Y+36	; 0x24
    20a0:	8d a1       	ldd	r24, Y+37	; 0x25
    20a2:	9e a1       	ldd	r25, Y+38	; 0x26
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	40 e8       	ldi	r20, 0x80	; 128
    20aa:	5f e3       	ldi	r21, 0x3F	; 63
    20ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20b0:	88 23       	and	r24, r24
    20b2:	2c f4       	brge	.+10     	; 0x20be <LEDS_Ping_Pong_Effect+0x16e>
		__ticks = 1;
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	9a a3       	std	Y+34, r25	; 0x22
    20ba:	89 a3       	std	Y+33, r24	; 0x21
    20bc:	3f c0       	rjmp	.+126    	; 0x213c <LEDS_Ping_Pong_Effect+0x1ec>
	else if (__tmp > 65535)
    20be:	6b a1       	ldd	r22, Y+35	; 0x23
    20c0:	7c a1       	ldd	r23, Y+36	; 0x24
    20c2:	8d a1       	ldd	r24, Y+37	; 0x25
    20c4:	9e a1       	ldd	r25, Y+38	; 0x26
    20c6:	20 e0       	ldi	r18, 0x00	; 0
    20c8:	3f ef       	ldi	r19, 0xFF	; 255
    20ca:	4f e7       	ldi	r20, 0x7F	; 127
    20cc:	57 e4       	ldi	r21, 0x47	; 71
    20ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20d2:	18 16       	cp	r1, r24
    20d4:	4c f5       	brge	.+82     	; 0x2128 <LEDS_Ping_Pong_Effect+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d6:	6f a1       	ldd	r22, Y+39	; 0x27
    20d8:	78 a5       	ldd	r23, Y+40	; 0x28
    20da:	89 a5       	ldd	r24, Y+41	; 0x29
    20dc:	9a a5       	ldd	r25, Y+42	; 0x2a
    20de:	20 e0       	ldi	r18, 0x00	; 0
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	40 e2       	ldi	r20, 0x20	; 32
    20e4:	51 e4       	ldi	r21, 0x41	; 65
    20e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ea:	dc 01       	movw	r26, r24
    20ec:	cb 01       	movw	r24, r22
    20ee:	bc 01       	movw	r22, r24
    20f0:	cd 01       	movw	r24, r26
    20f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f6:	dc 01       	movw	r26, r24
    20f8:	cb 01       	movw	r24, r22
    20fa:	9a a3       	std	Y+34, r25	; 0x22
    20fc:	89 a3       	std	Y+33, r24	; 0x21
    20fe:	0f c0       	rjmp	.+30     	; 0x211e <LEDS_Ping_Pong_Effect+0x1ce>
    2100:	88 ec       	ldi	r24, 0xC8	; 200
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	98 a3       	std	Y+32, r25	; 0x20
    2106:	8f 8f       	std	Y+31, r24	; 0x1f
    2108:	8f 8d       	ldd	r24, Y+31	; 0x1f
    210a:	98 a1       	ldd	r25, Y+32	; 0x20
    210c:	01 97       	sbiw	r24, 0x01	; 1
    210e:	f1 f7       	brne	.-4      	; 0x210c <LEDS_Ping_Pong_Effect+0x1bc>
    2110:	98 a3       	std	Y+32, r25	; 0x20
    2112:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2114:	89 a1       	ldd	r24, Y+33	; 0x21
    2116:	9a a1       	ldd	r25, Y+34	; 0x22
    2118:	01 97       	sbiw	r24, 0x01	; 1
    211a:	9a a3       	std	Y+34, r25	; 0x22
    211c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    211e:	89 a1       	ldd	r24, Y+33	; 0x21
    2120:	9a a1       	ldd	r25, Y+34	; 0x22
    2122:	00 97       	sbiw	r24, 0x00	; 0
    2124:	69 f7       	brne	.-38     	; 0x2100 <LEDS_Ping_Pong_Effect+0x1b0>
    2126:	14 c0       	rjmp	.+40     	; 0x2150 <LEDS_Ping_Pong_Effect+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2128:	6b a1       	ldd	r22, Y+35	; 0x23
    212a:	7c a1       	ldd	r23, Y+36	; 0x24
    212c:	8d a1       	ldd	r24, Y+37	; 0x25
    212e:	9e a1       	ldd	r25, Y+38	; 0x26
    2130:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2134:	dc 01       	movw	r26, r24
    2136:	cb 01       	movw	r24, r22
    2138:	9a a3       	std	Y+34, r25	; 0x22
    213a:	89 a3       	std	Y+33, r24	; 0x21
    213c:	89 a1       	ldd	r24, Y+33	; 0x21
    213e:	9a a1       	ldd	r25, Y+34	; 0x22
    2140:	9e 8f       	std	Y+30, r25	; 0x1e
    2142:	8d 8f       	std	Y+29, r24	; 0x1d
    2144:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2146:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2148:	01 97       	sbiw	r24, 0x01	; 1
    214a:	f1 f7       	brne	.-4      	; 0x2148 <LEDS_Ping_Pong_Effect+0x1f8>
    214c:	9e 8f       	std	Y+30, r25	; 0x1e
    214e:	8d 8f       	std	Y+29, r24	; 0x1d
		}
	}
}
void LEDS_Ping_Pong_Effect()
{
	for (u8 i = 0; i < 8; i++) {
    2150:	8c ad       	ldd	r24, Y+60	; 0x3c
    2152:	8f 5f       	subi	r24, 0xFF	; 255
    2154:	8c af       	std	Y+60, r24	; 0x3c
    2156:	8c ad       	ldd	r24, Y+60	; 0x3c
    2158:	88 30       	cpi	r24, 0x08	; 8
    215a:	08 f4       	brcc	.+2      	; 0x215e <LEDS_Ping_Pong_Effect+0x20e>
    215c:	05 cf       	rjmp	.-502    	; 0x1f68 <LEDS_Ping_Pong_Effect+0x18>
		_delay_ms(250);
		LED_voidOn(Led_arr[i]);
		_delay_ms(250);
	}

	for (u8 i = 0; i < 8; i++) {
    215e:	1b ae       	std	Y+59, r1	; 0x3b
    2160:	13 c0       	rjmp	.+38     	; 0x2188 <LEDS_Ping_Pong_Effect+0x238>
		LED_voidOff(Led_arr[i]);
    2162:	8b ad       	ldd	r24, Y+59	; 0x3b
    2164:	28 2f       	mov	r18, r24
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	c9 01       	movw	r24, r18
    216a:	88 0f       	add	r24, r24
    216c:	99 1f       	adc	r25, r25
    216e:	82 0f       	add	r24, r18
    2170:	93 1f       	adc	r25, r19
    2172:	fc 01       	movw	r30, r24
    2174:	e4 59       	subi	r30, 0x94	; 148
    2176:	ff 4f       	sbci	r31, 0xFF	; 255
    2178:	60 81       	ld	r22, Z
    217a:	71 81       	ldd	r23, Z+1	; 0x01
    217c:	82 81       	ldd	r24, Z+2	; 0x02
    217e:	0e 94 2a 09 	call	0x1254	; 0x1254 <LED_voidOff>
		_delay_ms(250);
		LED_voidOn(Led_arr[i]);
		_delay_ms(250);
	}

	for (u8 i = 0; i < 8; i++) {
    2182:	8b ad       	ldd	r24, Y+59	; 0x3b
    2184:	8f 5f       	subi	r24, 0xFF	; 255
    2186:	8b af       	std	Y+59, r24	; 0x3b
    2188:	8b ad       	ldd	r24, Y+59	; 0x3b
    218a:	88 30       	cpi	r24, 0x08	; 8
    218c:	50 f3       	brcs	.-44     	; 0x2162 <LEDS_Ping_Pong_Effect+0x212>
		LED_voidOff(Led_arr[i]);
	}

	for (s8 i = (8 ); i >= 0; i--) {
    218e:	88 e0       	ldi	r24, 0x08	; 8
    2190:	8a af       	std	Y+58, r24	; 0x3a
    2192:	f9 c0       	rjmp	.+498    	; 0x2386 <LEDS_Ping_Pong_Effect+0x436>
    2194:	80 e0       	ldi	r24, 0x00	; 0
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	aa e7       	ldi	r26, 0x7A	; 122
    219a:	b3 e4       	ldi	r27, 0x43	; 67
    219c:	89 8f       	std	Y+25, r24	; 0x19
    219e:	9a 8f       	std	Y+26, r25	; 0x1a
    21a0:	ab 8f       	std	Y+27, r26	; 0x1b
    21a2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21a4:	69 8d       	ldd	r22, Y+25	; 0x19
    21a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21ac:	20 e0       	ldi	r18, 0x00	; 0
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	4a ef       	ldi	r20, 0xFA	; 250
    21b2:	54 e4       	ldi	r21, 0x44	; 68
    21b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b8:	dc 01       	movw	r26, r24
    21ba:	cb 01       	movw	r24, r22
    21bc:	8d 8b       	std	Y+21, r24	; 0x15
    21be:	9e 8b       	std	Y+22, r25	; 0x16
    21c0:	af 8b       	std	Y+23, r26	; 0x17
    21c2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21c4:	6d 89       	ldd	r22, Y+21	; 0x15
    21c6:	7e 89       	ldd	r23, Y+22	; 0x16
    21c8:	8f 89       	ldd	r24, Y+23	; 0x17
    21ca:	98 8d       	ldd	r25, Y+24	; 0x18
    21cc:	20 e0       	ldi	r18, 0x00	; 0
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    21d0:	40 e8       	ldi	r20, 0x80	; 128
    21d2:	5f e3       	ldi	r21, 0x3F	; 63
    21d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21d8:	88 23       	and	r24, r24
    21da:	2c f4       	brge	.+10     	; 0x21e6 <LEDS_Ping_Pong_Effect+0x296>
		__ticks = 1;
    21dc:	81 e0       	ldi	r24, 0x01	; 1
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	9c 8b       	std	Y+20, r25	; 0x14
    21e2:	8b 8b       	std	Y+19, r24	; 0x13
    21e4:	3f c0       	rjmp	.+126    	; 0x2264 <LEDS_Ping_Pong_Effect+0x314>
	else if (__tmp > 65535)
    21e6:	6d 89       	ldd	r22, Y+21	; 0x15
    21e8:	7e 89       	ldd	r23, Y+22	; 0x16
    21ea:	8f 89       	ldd	r24, Y+23	; 0x17
    21ec:	98 8d       	ldd	r25, Y+24	; 0x18
    21ee:	20 e0       	ldi	r18, 0x00	; 0
    21f0:	3f ef       	ldi	r19, 0xFF	; 255
    21f2:	4f e7       	ldi	r20, 0x7F	; 127
    21f4:	57 e4       	ldi	r21, 0x47	; 71
    21f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21fa:	18 16       	cp	r1, r24
    21fc:	4c f5       	brge	.+82     	; 0x2250 <LEDS_Ping_Pong_Effect+0x300>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21fe:	69 8d       	ldd	r22, Y+25	; 0x19
    2200:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2202:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2204:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2206:	20 e0       	ldi	r18, 0x00	; 0
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	40 e2       	ldi	r20, 0x20	; 32
    220c:	51 e4       	ldi	r21, 0x41	; 65
    220e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2212:	dc 01       	movw	r26, r24
    2214:	cb 01       	movw	r24, r22
    2216:	bc 01       	movw	r22, r24
    2218:	cd 01       	movw	r24, r26
    221a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    221e:	dc 01       	movw	r26, r24
    2220:	cb 01       	movw	r24, r22
    2222:	9c 8b       	std	Y+20, r25	; 0x14
    2224:	8b 8b       	std	Y+19, r24	; 0x13
    2226:	0f c0       	rjmp	.+30     	; 0x2246 <LEDS_Ping_Pong_Effect+0x2f6>
    2228:	88 ec       	ldi	r24, 0xC8	; 200
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	9a 8b       	std	Y+18, r25	; 0x12
    222e:	89 8b       	std	Y+17, r24	; 0x11
    2230:	89 89       	ldd	r24, Y+17	; 0x11
    2232:	9a 89       	ldd	r25, Y+18	; 0x12
    2234:	01 97       	sbiw	r24, 0x01	; 1
    2236:	f1 f7       	brne	.-4      	; 0x2234 <LEDS_Ping_Pong_Effect+0x2e4>
    2238:	9a 8b       	std	Y+18, r25	; 0x12
    223a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    223c:	8b 89       	ldd	r24, Y+19	; 0x13
    223e:	9c 89       	ldd	r25, Y+20	; 0x14
    2240:	01 97       	sbiw	r24, 0x01	; 1
    2242:	9c 8b       	std	Y+20, r25	; 0x14
    2244:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2246:	8b 89       	ldd	r24, Y+19	; 0x13
    2248:	9c 89       	ldd	r25, Y+20	; 0x14
    224a:	00 97       	sbiw	r24, 0x00	; 0
    224c:	69 f7       	brne	.-38     	; 0x2228 <LEDS_Ping_Pong_Effect+0x2d8>
    224e:	14 c0       	rjmp	.+40     	; 0x2278 <LEDS_Ping_Pong_Effect+0x328>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2250:	6d 89       	ldd	r22, Y+21	; 0x15
    2252:	7e 89       	ldd	r23, Y+22	; 0x16
    2254:	8f 89       	ldd	r24, Y+23	; 0x17
    2256:	98 8d       	ldd	r25, Y+24	; 0x18
    2258:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    225c:	dc 01       	movw	r26, r24
    225e:	cb 01       	movw	r24, r22
    2260:	9c 8b       	std	Y+20, r25	; 0x14
    2262:	8b 8b       	std	Y+19, r24	; 0x13
    2264:	8b 89       	ldd	r24, Y+19	; 0x13
    2266:	9c 89       	ldd	r25, Y+20	; 0x14
    2268:	98 8b       	std	Y+16, r25	; 0x10
    226a:	8f 87       	std	Y+15, r24	; 0x0f
    226c:	8f 85       	ldd	r24, Y+15	; 0x0f
    226e:	98 89       	ldd	r25, Y+16	; 0x10
    2270:	01 97       	sbiw	r24, 0x01	; 1
    2272:	f1 f7       	brne	.-4      	; 0x2270 <LEDS_Ping_Pong_Effect+0x320>
    2274:	98 8b       	std	Y+16, r25	; 0x10
    2276:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(250);
		LED_voidOn(Led_arr[i]);
    2278:	8a ad       	ldd	r24, Y+58	; 0x3a
    227a:	28 2f       	mov	r18, r24
    227c:	33 27       	eor	r19, r19
    227e:	27 fd       	sbrc	r18, 7
    2280:	30 95       	com	r19
    2282:	c9 01       	movw	r24, r18
    2284:	88 0f       	add	r24, r24
    2286:	99 1f       	adc	r25, r25
    2288:	82 0f       	add	r24, r18
    228a:	93 1f       	adc	r25, r19
    228c:	fc 01       	movw	r30, r24
    228e:	e4 59       	subi	r30, 0x94	; 148
    2290:	ff 4f       	sbci	r31, 0xFF	; 255
    2292:	60 81       	ld	r22, Z
    2294:	71 81       	ldd	r23, Z+1	; 0x01
    2296:	82 81       	ldd	r24, Z+2	; 0x02
    2298:	0e 94 08 09 	call	0x1210	; 0x1210 <LED_voidOn>
    229c:	80 e0       	ldi	r24, 0x00	; 0
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	aa e7       	ldi	r26, 0x7A	; 122
    22a2:	b3 e4       	ldi	r27, 0x43	; 67
    22a4:	8b 87       	std	Y+11, r24	; 0x0b
    22a6:	9c 87       	std	Y+12, r25	; 0x0c
    22a8:	ad 87       	std	Y+13, r26	; 0x0d
    22aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    22ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    22b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    22b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	4a ef       	ldi	r20, 0xFA	; 250
    22ba:	54 e4       	ldi	r21, 0x44	; 68
    22bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c0:	dc 01       	movw	r26, r24
    22c2:	cb 01       	movw	r24, r22
    22c4:	8f 83       	std	Y+7, r24	; 0x07
    22c6:	98 87       	std	Y+8, r25	; 0x08
    22c8:	a9 87       	std	Y+9, r26	; 0x09
    22ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22cc:	6f 81       	ldd	r22, Y+7	; 0x07
    22ce:	78 85       	ldd	r23, Y+8	; 0x08
    22d0:	89 85       	ldd	r24, Y+9	; 0x09
    22d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	40 e8       	ldi	r20, 0x80	; 128
    22da:	5f e3       	ldi	r21, 0x3F	; 63
    22dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22e0:	88 23       	and	r24, r24
    22e2:	2c f4       	brge	.+10     	; 0x22ee <LEDS_Ping_Pong_Effect+0x39e>
		__ticks = 1;
    22e4:	81 e0       	ldi	r24, 0x01	; 1
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	9e 83       	std	Y+6, r25	; 0x06
    22ea:	8d 83       	std	Y+5, r24	; 0x05
    22ec:	3f c0       	rjmp	.+126    	; 0x236c <LEDS_Ping_Pong_Effect+0x41c>
	else if (__tmp > 65535)
    22ee:	6f 81       	ldd	r22, Y+7	; 0x07
    22f0:	78 85       	ldd	r23, Y+8	; 0x08
    22f2:	89 85       	ldd	r24, Y+9	; 0x09
    22f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22f6:	20 e0       	ldi	r18, 0x00	; 0
    22f8:	3f ef       	ldi	r19, 0xFF	; 255
    22fa:	4f e7       	ldi	r20, 0x7F	; 127
    22fc:	57 e4       	ldi	r21, 0x47	; 71
    22fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2302:	18 16       	cp	r1, r24
    2304:	4c f5       	brge	.+82     	; 0x2358 <LEDS_Ping_Pong_Effect+0x408>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2306:	6b 85       	ldd	r22, Y+11	; 0x0b
    2308:	7c 85       	ldd	r23, Y+12	; 0x0c
    230a:	8d 85       	ldd	r24, Y+13	; 0x0d
    230c:	9e 85       	ldd	r25, Y+14	; 0x0e
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	40 e2       	ldi	r20, 0x20	; 32
    2314:	51 e4       	ldi	r21, 0x41	; 65
    2316:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    231a:	dc 01       	movw	r26, r24
    231c:	cb 01       	movw	r24, r22
    231e:	bc 01       	movw	r22, r24
    2320:	cd 01       	movw	r24, r26
    2322:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2326:	dc 01       	movw	r26, r24
    2328:	cb 01       	movw	r24, r22
    232a:	9e 83       	std	Y+6, r25	; 0x06
    232c:	8d 83       	std	Y+5, r24	; 0x05
    232e:	0f c0       	rjmp	.+30     	; 0x234e <LEDS_Ping_Pong_Effect+0x3fe>
    2330:	88 ec       	ldi	r24, 0xC8	; 200
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	9c 83       	std	Y+4, r25	; 0x04
    2336:	8b 83       	std	Y+3, r24	; 0x03
    2338:	8b 81       	ldd	r24, Y+3	; 0x03
    233a:	9c 81       	ldd	r25, Y+4	; 0x04
    233c:	01 97       	sbiw	r24, 0x01	; 1
    233e:	f1 f7       	brne	.-4      	; 0x233c <LEDS_Ping_Pong_Effect+0x3ec>
    2340:	9c 83       	std	Y+4, r25	; 0x04
    2342:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2344:	8d 81       	ldd	r24, Y+5	; 0x05
    2346:	9e 81       	ldd	r25, Y+6	; 0x06
    2348:	01 97       	sbiw	r24, 0x01	; 1
    234a:	9e 83       	std	Y+6, r25	; 0x06
    234c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    234e:	8d 81       	ldd	r24, Y+5	; 0x05
    2350:	9e 81       	ldd	r25, Y+6	; 0x06
    2352:	00 97       	sbiw	r24, 0x00	; 0
    2354:	69 f7       	brne	.-38     	; 0x2330 <LEDS_Ping_Pong_Effect+0x3e0>
    2356:	14 c0       	rjmp	.+40     	; 0x2380 <LEDS_Ping_Pong_Effect+0x430>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2358:	6f 81       	ldd	r22, Y+7	; 0x07
    235a:	78 85       	ldd	r23, Y+8	; 0x08
    235c:	89 85       	ldd	r24, Y+9	; 0x09
    235e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2360:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2364:	dc 01       	movw	r26, r24
    2366:	cb 01       	movw	r24, r22
    2368:	9e 83       	std	Y+6, r25	; 0x06
    236a:	8d 83       	std	Y+5, r24	; 0x05
    236c:	8d 81       	ldd	r24, Y+5	; 0x05
    236e:	9e 81       	ldd	r25, Y+6	; 0x06
    2370:	9a 83       	std	Y+2, r25	; 0x02
    2372:	89 83       	std	Y+1, r24	; 0x01
    2374:	89 81       	ldd	r24, Y+1	; 0x01
    2376:	9a 81       	ldd	r25, Y+2	; 0x02
    2378:	01 97       	sbiw	r24, 0x01	; 1
    237a:	f1 f7       	brne	.-4      	; 0x2378 <LEDS_Ping_Pong_Effect+0x428>
    237c:	9a 83       	std	Y+2, r25	; 0x02
    237e:	89 83       	std	Y+1, r24	; 0x01

	for (u8 i = 0; i < 8; i++) {
		LED_voidOff(Led_arr[i]);
	}

	for (s8 i = (8 ); i >= 0; i--) {
    2380:	8a ad       	ldd	r24, Y+58	; 0x3a
    2382:	81 50       	subi	r24, 0x01	; 1
    2384:	8a af       	std	Y+58, r24	; 0x3a
    2386:	8a ad       	ldd	r24, Y+58	; 0x3a
    2388:	88 23       	and	r24, r24
    238a:	0c f0       	brlt	.+2      	; 0x238e <LEDS_Ping_Pong_Effect+0x43e>
    238c:	03 cf       	rjmp	.-506    	; 0x2194 <LEDS_Ping_Pong_Effect+0x244>
		_delay_ms(250);
		LED_voidOn(Led_arr[i]);
		_delay_ms(250);
	}

	for (u8 i = 0; i < 8; i++) {
    238e:	19 ae       	std	Y+57, r1	; 0x39
    2390:	13 c0       	rjmp	.+38     	; 0x23b8 <LEDS_Ping_Pong_Effect+0x468>
		LED_voidOff(Led_arr[i]);
    2392:	89 ad       	ldd	r24, Y+57	; 0x39
    2394:	28 2f       	mov	r18, r24
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	c9 01       	movw	r24, r18
    239a:	88 0f       	add	r24, r24
    239c:	99 1f       	adc	r25, r25
    239e:	82 0f       	add	r24, r18
    23a0:	93 1f       	adc	r25, r19
    23a2:	fc 01       	movw	r30, r24
    23a4:	e4 59       	subi	r30, 0x94	; 148
    23a6:	ff 4f       	sbci	r31, 0xFF	; 255
    23a8:	60 81       	ld	r22, Z
    23aa:	71 81       	ldd	r23, Z+1	; 0x01
    23ac:	82 81       	ldd	r24, Z+2	; 0x02
    23ae:	0e 94 2a 09 	call	0x1254	; 0x1254 <LED_voidOff>
		_delay_ms(250);
		LED_voidOn(Led_arr[i]);
		_delay_ms(250);
	}

	for (u8 i = 0; i < 8; i++) {
    23b2:	89 ad       	ldd	r24, Y+57	; 0x39
    23b4:	8f 5f       	subi	r24, 0xFF	; 255
    23b6:	89 af       	std	Y+57, r24	; 0x39
    23b8:	89 ad       	ldd	r24, Y+57	; 0x39
    23ba:	88 30       	cpi	r24, 0x08	; 8
    23bc:	50 f3       	brcs	.-44     	; 0x2392 <LEDS_Ping_Pong_Effect+0x442>
		LED_voidOff(Led_arr[i]);
	}
}
    23be:	ec 96       	adiw	r28, 0x3c	; 60
    23c0:	0f b6       	in	r0, 0x3f	; 63
    23c2:	f8 94       	cli
    23c4:	de bf       	out	0x3e, r29	; 62
    23c6:	0f be       	out	0x3f, r0	; 63
    23c8:	cd bf       	out	0x3d, r28	; 61
    23ca:	cf 91       	pop	r28
    23cc:	df 91       	pop	r29
    23ce:	08 95       	ret

000023d0 <Incrementing_LED>:
void Incrementing_LED()
{
    23d0:	df 93       	push	r29
    23d2:	cf 93       	push	r28
    23d4:	cd b7       	in	r28, 0x3d	; 61
    23d6:	de b7       	in	r29, 0x3e	; 62
    23d8:	6e 97       	sbiw	r28, 0x1e	; 30
    23da:	0f b6       	in	r0, 0x3f	; 63
    23dc:	f8 94       	cli
    23de:	de bf       	out	0x3e, r29	; 62
    23e0:	0f be       	out	0x3f, r0	; 63
    23e2:	cd bf       	out	0x3d, r28	; 61
	for (u8 i = 0; i < 8; i++) {
    23e4:	1e 8e       	std	Y+30, r1	; 0x1e
    23e6:	f7 c0       	rjmp	.+494    	; 0x25d6 <Incrementing_LED+0x206>
    23e8:	80 e0       	ldi	r24, 0x00	; 0
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	aa e7       	ldi	r26, 0x7A	; 122
    23ee:	b3 e4       	ldi	r27, 0x43	; 67
    23f0:	89 8f       	std	Y+25, r24	; 0x19
    23f2:	9a 8f       	std	Y+26, r25	; 0x1a
    23f4:	ab 8f       	std	Y+27, r26	; 0x1b
    23f6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23f8:	69 8d       	ldd	r22, Y+25	; 0x19
    23fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2400:	20 e0       	ldi	r18, 0x00	; 0
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	4a ef       	ldi	r20, 0xFA	; 250
    2406:	54 e4       	ldi	r21, 0x44	; 68
    2408:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    240c:	dc 01       	movw	r26, r24
    240e:	cb 01       	movw	r24, r22
    2410:	8d 8b       	std	Y+21, r24	; 0x15
    2412:	9e 8b       	std	Y+22, r25	; 0x16
    2414:	af 8b       	std	Y+23, r26	; 0x17
    2416:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2418:	6d 89       	ldd	r22, Y+21	; 0x15
    241a:	7e 89       	ldd	r23, Y+22	; 0x16
    241c:	8f 89       	ldd	r24, Y+23	; 0x17
    241e:	98 8d       	ldd	r25, Y+24	; 0x18
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	40 e8       	ldi	r20, 0x80	; 128
    2426:	5f e3       	ldi	r21, 0x3F	; 63
    2428:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    242c:	88 23       	and	r24, r24
    242e:	2c f4       	brge	.+10     	; 0x243a <Incrementing_LED+0x6a>
		__ticks = 1;
    2430:	81 e0       	ldi	r24, 0x01	; 1
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	9c 8b       	std	Y+20, r25	; 0x14
    2436:	8b 8b       	std	Y+19, r24	; 0x13
    2438:	3f c0       	rjmp	.+126    	; 0x24b8 <Incrementing_LED+0xe8>
	else if (__tmp > 65535)
    243a:	6d 89       	ldd	r22, Y+21	; 0x15
    243c:	7e 89       	ldd	r23, Y+22	; 0x16
    243e:	8f 89       	ldd	r24, Y+23	; 0x17
    2440:	98 8d       	ldd	r25, Y+24	; 0x18
    2442:	20 e0       	ldi	r18, 0x00	; 0
    2444:	3f ef       	ldi	r19, 0xFF	; 255
    2446:	4f e7       	ldi	r20, 0x7F	; 127
    2448:	57 e4       	ldi	r21, 0x47	; 71
    244a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    244e:	18 16       	cp	r1, r24
    2450:	4c f5       	brge	.+82     	; 0x24a4 <Incrementing_LED+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2452:	69 8d       	ldd	r22, Y+25	; 0x19
    2454:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2456:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2458:	9c 8d       	ldd	r25, Y+28	; 0x1c
    245a:	20 e0       	ldi	r18, 0x00	; 0
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	40 e2       	ldi	r20, 0x20	; 32
    2460:	51 e4       	ldi	r21, 0x41	; 65
    2462:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2466:	dc 01       	movw	r26, r24
    2468:	cb 01       	movw	r24, r22
    246a:	bc 01       	movw	r22, r24
    246c:	cd 01       	movw	r24, r26
    246e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2472:	dc 01       	movw	r26, r24
    2474:	cb 01       	movw	r24, r22
    2476:	9c 8b       	std	Y+20, r25	; 0x14
    2478:	8b 8b       	std	Y+19, r24	; 0x13
    247a:	0f c0       	rjmp	.+30     	; 0x249a <Incrementing_LED+0xca>
    247c:	88 ec       	ldi	r24, 0xC8	; 200
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	9a 8b       	std	Y+18, r25	; 0x12
    2482:	89 8b       	std	Y+17, r24	; 0x11
    2484:	89 89       	ldd	r24, Y+17	; 0x11
    2486:	9a 89       	ldd	r25, Y+18	; 0x12
    2488:	01 97       	sbiw	r24, 0x01	; 1
    248a:	f1 f7       	brne	.-4      	; 0x2488 <Incrementing_LED+0xb8>
    248c:	9a 8b       	std	Y+18, r25	; 0x12
    248e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2490:	8b 89       	ldd	r24, Y+19	; 0x13
    2492:	9c 89       	ldd	r25, Y+20	; 0x14
    2494:	01 97       	sbiw	r24, 0x01	; 1
    2496:	9c 8b       	std	Y+20, r25	; 0x14
    2498:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    249a:	8b 89       	ldd	r24, Y+19	; 0x13
    249c:	9c 89       	ldd	r25, Y+20	; 0x14
    249e:	00 97       	sbiw	r24, 0x00	; 0
    24a0:	69 f7       	brne	.-38     	; 0x247c <Incrementing_LED+0xac>
    24a2:	14 c0       	rjmp	.+40     	; 0x24cc <Incrementing_LED+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24a4:	6d 89       	ldd	r22, Y+21	; 0x15
    24a6:	7e 89       	ldd	r23, Y+22	; 0x16
    24a8:	8f 89       	ldd	r24, Y+23	; 0x17
    24aa:	98 8d       	ldd	r25, Y+24	; 0x18
    24ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b0:	dc 01       	movw	r26, r24
    24b2:	cb 01       	movw	r24, r22
    24b4:	9c 8b       	std	Y+20, r25	; 0x14
    24b6:	8b 8b       	std	Y+19, r24	; 0x13
    24b8:	8b 89       	ldd	r24, Y+19	; 0x13
    24ba:	9c 89       	ldd	r25, Y+20	; 0x14
    24bc:	98 8b       	std	Y+16, r25	; 0x10
    24be:	8f 87       	std	Y+15, r24	; 0x0f
    24c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    24c2:	98 89       	ldd	r25, Y+16	; 0x10
    24c4:	01 97       	sbiw	r24, 0x01	; 1
    24c6:	f1 f7       	brne	.-4      	; 0x24c4 <Incrementing_LED+0xf4>
    24c8:	98 8b       	std	Y+16, r25	; 0x10
    24ca:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(250);
		LED_voidOn(Led_arr[i]);
    24cc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24ce:	28 2f       	mov	r18, r24
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	c9 01       	movw	r24, r18
    24d4:	88 0f       	add	r24, r24
    24d6:	99 1f       	adc	r25, r25
    24d8:	82 0f       	add	r24, r18
    24da:	93 1f       	adc	r25, r19
    24dc:	fc 01       	movw	r30, r24
    24de:	e4 59       	subi	r30, 0x94	; 148
    24e0:	ff 4f       	sbci	r31, 0xFF	; 255
    24e2:	60 81       	ld	r22, Z
    24e4:	71 81       	ldd	r23, Z+1	; 0x01
    24e6:	82 81       	ldd	r24, Z+2	; 0x02
    24e8:	0e 94 08 09 	call	0x1210	; 0x1210 <LED_voidOn>
    24ec:	80 e0       	ldi	r24, 0x00	; 0
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	aa e7       	ldi	r26, 0x7A	; 122
    24f2:	b3 e4       	ldi	r27, 0x43	; 67
    24f4:	8b 87       	std	Y+11, r24	; 0x0b
    24f6:	9c 87       	std	Y+12, r25	; 0x0c
    24f8:	ad 87       	std	Y+13, r26	; 0x0d
    24fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    24fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2500:	8d 85       	ldd	r24, Y+13	; 0x0d
    2502:	9e 85       	ldd	r25, Y+14	; 0x0e
    2504:	20 e0       	ldi	r18, 0x00	; 0
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	4a ef       	ldi	r20, 0xFA	; 250
    250a:	54 e4       	ldi	r21, 0x44	; 68
    250c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2510:	dc 01       	movw	r26, r24
    2512:	cb 01       	movw	r24, r22
    2514:	8f 83       	std	Y+7, r24	; 0x07
    2516:	98 87       	std	Y+8, r25	; 0x08
    2518:	a9 87       	std	Y+9, r26	; 0x09
    251a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    251c:	6f 81       	ldd	r22, Y+7	; 0x07
    251e:	78 85       	ldd	r23, Y+8	; 0x08
    2520:	89 85       	ldd	r24, Y+9	; 0x09
    2522:	9a 85       	ldd	r25, Y+10	; 0x0a
    2524:	20 e0       	ldi	r18, 0x00	; 0
    2526:	30 e0       	ldi	r19, 0x00	; 0
    2528:	40 e8       	ldi	r20, 0x80	; 128
    252a:	5f e3       	ldi	r21, 0x3F	; 63
    252c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2530:	88 23       	and	r24, r24
    2532:	2c f4       	brge	.+10     	; 0x253e <Incrementing_LED+0x16e>
		__ticks = 1;
    2534:	81 e0       	ldi	r24, 0x01	; 1
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	9e 83       	std	Y+6, r25	; 0x06
    253a:	8d 83       	std	Y+5, r24	; 0x05
    253c:	3f c0       	rjmp	.+126    	; 0x25bc <Incrementing_LED+0x1ec>
	else if (__tmp > 65535)
    253e:	6f 81       	ldd	r22, Y+7	; 0x07
    2540:	78 85       	ldd	r23, Y+8	; 0x08
    2542:	89 85       	ldd	r24, Y+9	; 0x09
    2544:	9a 85       	ldd	r25, Y+10	; 0x0a
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	3f ef       	ldi	r19, 0xFF	; 255
    254a:	4f e7       	ldi	r20, 0x7F	; 127
    254c:	57 e4       	ldi	r21, 0x47	; 71
    254e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2552:	18 16       	cp	r1, r24
    2554:	4c f5       	brge	.+82     	; 0x25a8 <Incrementing_LED+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2556:	6b 85       	ldd	r22, Y+11	; 0x0b
    2558:	7c 85       	ldd	r23, Y+12	; 0x0c
    255a:	8d 85       	ldd	r24, Y+13	; 0x0d
    255c:	9e 85       	ldd	r25, Y+14	; 0x0e
    255e:	20 e0       	ldi	r18, 0x00	; 0
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	40 e2       	ldi	r20, 0x20	; 32
    2564:	51 e4       	ldi	r21, 0x41	; 65
    2566:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    256a:	dc 01       	movw	r26, r24
    256c:	cb 01       	movw	r24, r22
    256e:	bc 01       	movw	r22, r24
    2570:	cd 01       	movw	r24, r26
    2572:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2576:	dc 01       	movw	r26, r24
    2578:	cb 01       	movw	r24, r22
    257a:	9e 83       	std	Y+6, r25	; 0x06
    257c:	8d 83       	std	Y+5, r24	; 0x05
    257e:	0f c0       	rjmp	.+30     	; 0x259e <Incrementing_LED+0x1ce>
    2580:	88 ec       	ldi	r24, 0xC8	; 200
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	9c 83       	std	Y+4, r25	; 0x04
    2586:	8b 83       	std	Y+3, r24	; 0x03
    2588:	8b 81       	ldd	r24, Y+3	; 0x03
    258a:	9c 81       	ldd	r25, Y+4	; 0x04
    258c:	01 97       	sbiw	r24, 0x01	; 1
    258e:	f1 f7       	brne	.-4      	; 0x258c <Incrementing_LED+0x1bc>
    2590:	9c 83       	std	Y+4, r25	; 0x04
    2592:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2594:	8d 81       	ldd	r24, Y+5	; 0x05
    2596:	9e 81       	ldd	r25, Y+6	; 0x06
    2598:	01 97       	sbiw	r24, 0x01	; 1
    259a:	9e 83       	std	Y+6, r25	; 0x06
    259c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    259e:	8d 81       	ldd	r24, Y+5	; 0x05
    25a0:	9e 81       	ldd	r25, Y+6	; 0x06
    25a2:	00 97       	sbiw	r24, 0x00	; 0
    25a4:	69 f7       	brne	.-38     	; 0x2580 <Incrementing_LED+0x1b0>
    25a6:	14 c0       	rjmp	.+40     	; 0x25d0 <Incrementing_LED+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25a8:	6f 81       	ldd	r22, Y+7	; 0x07
    25aa:	78 85       	ldd	r23, Y+8	; 0x08
    25ac:	89 85       	ldd	r24, Y+9	; 0x09
    25ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    25b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b4:	dc 01       	movw	r26, r24
    25b6:	cb 01       	movw	r24, r22
    25b8:	9e 83       	std	Y+6, r25	; 0x06
    25ba:	8d 83       	std	Y+5, r24	; 0x05
    25bc:	8d 81       	ldd	r24, Y+5	; 0x05
    25be:	9e 81       	ldd	r25, Y+6	; 0x06
    25c0:	9a 83       	std	Y+2, r25	; 0x02
    25c2:	89 83       	std	Y+1, r24	; 0x01
    25c4:	89 81       	ldd	r24, Y+1	; 0x01
    25c6:	9a 81       	ldd	r25, Y+2	; 0x02
    25c8:	01 97       	sbiw	r24, 0x01	; 1
    25ca:	f1 f7       	brne	.-4      	; 0x25c8 <Incrementing_LED+0x1f8>
    25cc:	9a 83       	std	Y+2, r25	; 0x02
    25ce:	89 83       	std	Y+1, r24	; 0x01
		LED_voidOff(Led_arr[i]);
	}
}
void Incrementing_LED()
{
	for (u8 i = 0; i < 8; i++) {
    25d0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    25d2:	8f 5f       	subi	r24, 0xFF	; 255
    25d4:	8e 8f       	std	Y+30, r24	; 0x1e
    25d6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    25d8:	88 30       	cpi	r24, 0x08	; 8
    25da:	08 f4       	brcc	.+2      	; 0x25de <Incrementing_LED+0x20e>
    25dc:	05 cf       	rjmp	.-502    	; 0x23e8 <Incrementing_LED+0x18>
		_delay_ms(250);
		LED_voidOn(Led_arr[i]);
		_delay_ms(250);
	}

	for (u8 i = 0; i < 8; i++) {
    25de:	1d 8e       	std	Y+29, r1	; 0x1d
    25e0:	13 c0       	rjmp	.+38     	; 0x2608 <Incrementing_LED+0x238>
		LED_voidOff(Led_arr[i]);
    25e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25e4:	28 2f       	mov	r18, r24
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	c9 01       	movw	r24, r18
    25ea:	88 0f       	add	r24, r24
    25ec:	99 1f       	adc	r25, r25
    25ee:	82 0f       	add	r24, r18
    25f0:	93 1f       	adc	r25, r19
    25f2:	fc 01       	movw	r30, r24
    25f4:	e4 59       	subi	r30, 0x94	; 148
    25f6:	ff 4f       	sbci	r31, 0xFF	; 255
    25f8:	60 81       	ld	r22, Z
    25fa:	71 81       	ldd	r23, Z+1	; 0x01
    25fc:	82 81       	ldd	r24, Z+2	; 0x02
    25fe:	0e 94 2a 09 	call	0x1254	; 0x1254 <LED_voidOff>
		_delay_ms(250);
		LED_voidOn(Led_arr[i]);
		_delay_ms(250);
	}

	for (u8 i = 0; i < 8; i++) {
    2602:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2604:	8f 5f       	subi	r24, 0xFF	; 255
    2606:	8d 8f       	std	Y+29, r24	; 0x1d
    2608:	8d 8d       	ldd	r24, Y+29	; 0x1d
    260a:	88 30       	cpi	r24, 0x08	; 8
    260c:	50 f3       	brcs	.-44     	; 0x25e2 <Incrementing_LED+0x212>
		LED_voidOff(Led_arr[i]);
	}
}
    260e:	6e 96       	adiw	r28, 0x1e	; 30
    2610:	0f b6       	in	r0, 0x3f	; 63
    2612:	f8 94       	cli
    2614:	de bf       	out	0x3e, r29	; 62
    2616:	0f be       	out	0x3f, r0	; 63
    2618:	cd bf       	out	0x3d, r28	; 61
    261a:	cf 91       	pop	r28
    261c:	df 91       	pop	r29
    261e:	08 95       	ret

00002620 <SSD_voidCount>:
void SSD_voidCount()
{
    2620:	df 93       	push	r29
    2622:	cf 93       	push	r28
    2624:	cd b7       	in	r28, 0x3d	; 61
    2626:	de b7       	in	r29, 0x3e	; 62
    2628:	6d 97       	sbiw	r28, 0x1d	; 29
    262a:	0f b6       	in	r0, 0x3f	; 63
    262c:	f8 94       	cli
    262e:	de bf       	out	0x3e, r29	; 62
    2630:	0f be       	out	0x3f, r0	; 63
    2632:	cd bf       	out	0x3d, r28	; 61
	for (u8 i =0 ; i<=8 ; i++)
    2634:	1d 8e       	std	Y+29, r1	; 0x1d
    2636:	82 c0       	rjmp	.+260    	; 0x273c <SSD_voidCount+0x11c>
	{

		SSD_voidSendNumber(SSD1 , i );
    2638:	80 91 68 00 	lds	r24, 0x0068
    263c:	90 91 69 00 	lds	r25, 0x0069
    2640:	a0 91 6a 00 	lds	r26, 0x006A
    2644:	b0 91 6b 00 	lds	r27, 0x006B
    2648:	bc 01       	movw	r22, r24
    264a:	cd 01       	movw	r24, r26
    264c:	4d 8d       	ldd	r20, Y+29	; 0x1d
    264e:	0e 94 a1 14 	call	0x2942	; 0x2942 <SSD_voidSendNumber>
    2652:	80 e0       	ldi	r24, 0x00	; 0
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	a6 e9       	ldi	r26, 0x96	; 150
    2658:	b3 e4       	ldi	r27, 0x43	; 67
    265a:	89 8f       	std	Y+25, r24	; 0x19
    265c:	9a 8f       	std	Y+26, r25	; 0x1a
    265e:	ab 8f       	std	Y+27, r26	; 0x1b
    2660:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2662:	69 8d       	ldd	r22, Y+25	; 0x19
    2664:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2666:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2668:	9c 8d       	ldd	r25, Y+28	; 0x1c
    266a:	20 e0       	ldi	r18, 0x00	; 0
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	4a ef       	ldi	r20, 0xFA	; 250
    2670:	54 e4       	ldi	r21, 0x44	; 68
    2672:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2676:	dc 01       	movw	r26, r24
    2678:	cb 01       	movw	r24, r22
    267a:	8d 8b       	std	Y+21, r24	; 0x15
    267c:	9e 8b       	std	Y+22, r25	; 0x16
    267e:	af 8b       	std	Y+23, r26	; 0x17
    2680:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2682:	6d 89       	ldd	r22, Y+21	; 0x15
    2684:	7e 89       	ldd	r23, Y+22	; 0x16
    2686:	8f 89       	ldd	r24, Y+23	; 0x17
    2688:	98 8d       	ldd	r25, Y+24	; 0x18
    268a:	20 e0       	ldi	r18, 0x00	; 0
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	40 e8       	ldi	r20, 0x80	; 128
    2690:	5f e3       	ldi	r21, 0x3F	; 63
    2692:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2696:	88 23       	and	r24, r24
    2698:	2c f4       	brge	.+10     	; 0x26a4 <SSD_voidCount+0x84>
		__ticks = 1;
    269a:	81 e0       	ldi	r24, 0x01	; 1
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	9c 8b       	std	Y+20, r25	; 0x14
    26a0:	8b 8b       	std	Y+19, r24	; 0x13
    26a2:	3f c0       	rjmp	.+126    	; 0x2722 <SSD_voidCount+0x102>
	else if (__tmp > 65535)
    26a4:	6d 89       	ldd	r22, Y+21	; 0x15
    26a6:	7e 89       	ldd	r23, Y+22	; 0x16
    26a8:	8f 89       	ldd	r24, Y+23	; 0x17
    26aa:	98 8d       	ldd	r25, Y+24	; 0x18
    26ac:	20 e0       	ldi	r18, 0x00	; 0
    26ae:	3f ef       	ldi	r19, 0xFF	; 255
    26b0:	4f e7       	ldi	r20, 0x7F	; 127
    26b2:	57 e4       	ldi	r21, 0x47	; 71
    26b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26b8:	18 16       	cp	r1, r24
    26ba:	4c f5       	brge	.+82     	; 0x270e <SSD_voidCount+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26bc:	69 8d       	ldd	r22, Y+25	; 0x19
    26be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	40 e2       	ldi	r20, 0x20	; 32
    26ca:	51 e4       	ldi	r21, 0x41	; 65
    26cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d0:	dc 01       	movw	r26, r24
    26d2:	cb 01       	movw	r24, r22
    26d4:	bc 01       	movw	r22, r24
    26d6:	cd 01       	movw	r24, r26
    26d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26dc:	dc 01       	movw	r26, r24
    26de:	cb 01       	movw	r24, r22
    26e0:	9c 8b       	std	Y+20, r25	; 0x14
    26e2:	8b 8b       	std	Y+19, r24	; 0x13
    26e4:	0f c0       	rjmp	.+30     	; 0x2704 <SSD_voidCount+0xe4>
    26e6:	88 ec       	ldi	r24, 0xC8	; 200
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	9a 8b       	std	Y+18, r25	; 0x12
    26ec:	89 8b       	std	Y+17, r24	; 0x11
    26ee:	89 89       	ldd	r24, Y+17	; 0x11
    26f0:	9a 89       	ldd	r25, Y+18	; 0x12
    26f2:	01 97       	sbiw	r24, 0x01	; 1
    26f4:	f1 f7       	brne	.-4      	; 0x26f2 <SSD_voidCount+0xd2>
    26f6:	9a 8b       	std	Y+18, r25	; 0x12
    26f8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26fa:	8b 89       	ldd	r24, Y+19	; 0x13
    26fc:	9c 89       	ldd	r25, Y+20	; 0x14
    26fe:	01 97       	sbiw	r24, 0x01	; 1
    2700:	9c 8b       	std	Y+20, r25	; 0x14
    2702:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2704:	8b 89       	ldd	r24, Y+19	; 0x13
    2706:	9c 89       	ldd	r25, Y+20	; 0x14
    2708:	00 97       	sbiw	r24, 0x00	; 0
    270a:	69 f7       	brne	.-38     	; 0x26e6 <SSD_voidCount+0xc6>
    270c:	14 c0       	rjmp	.+40     	; 0x2736 <SSD_voidCount+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    270e:	6d 89       	ldd	r22, Y+21	; 0x15
    2710:	7e 89       	ldd	r23, Y+22	; 0x16
    2712:	8f 89       	ldd	r24, Y+23	; 0x17
    2714:	98 8d       	ldd	r25, Y+24	; 0x18
    2716:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    271a:	dc 01       	movw	r26, r24
    271c:	cb 01       	movw	r24, r22
    271e:	9c 8b       	std	Y+20, r25	; 0x14
    2720:	8b 8b       	std	Y+19, r24	; 0x13
    2722:	8b 89       	ldd	r24, Y+19	; 0x13
    2724:	9c 89       	ldd	r25, Y+20	; 0x14
    2726:	98 8b       	std	Y+16, r25	; 0x10
    2728:	8f 87       	std	Y+15, r24	; 0x0f
    272a:	8f 85       	ldd	r24, Y+15	; 0x0f
    272c:	98 89       	ldd	r25, Y+16	; 0x10
    272e:	01 97       	sbiw	r24, 0x01	; 1
    2730:	f1 f7       	brne	.-4      	; 0x272e <SSD_voidCount+0x10e>
    2732:	98 8b       	std	Y+16, r25	; 0x10
    2734:	8f 87       	std	Y+15, r24	; 0x0f
		LED_voidOff(Led_arr[i]);
	}
}
void SSD_voidCount()
{
	for (u8 i =0 ; i<=8 ; i++)
    2736:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2738:	8f 5f       	subi	r24, 0xFF	; 255
    273a:	8d 8f       	std	Y+29, r24	; 0x1d
    273c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    273e:	89 30       	cpi	r24, 0x09	; 9
    2740:	08 f4       	brcc	.+2      	; 0x2744 <SSD_voidCount+0x124>
    2742:	7a cf       	rjmp	.-268    	; 0x2638 <SSD_voidCount+0x18>

		SSD_voidSendNumber(SSD1 , i );
		_delay_ms(300) ;

	}
	for (i=8;i>=0;i--)
    2744:	88 e0       	ldi	r24, 0x08	; 8
    2746:	80 93 a6 00 	sts	0x00A6, r24
	{
		SSD_voidSendNumber(SSD1 ,i);
    274a:	20 91 a6 00 	lds	r18, 0x00A6
    274e:	80 91 68 00 	lds	r24, 0x0068
    2752:	90 91 69 00 	lds	r25, 0x0069
    2756:	a0 91 6a 00 	lds	r26, 0x006A
    275a:	b0 91 6b 00 	lds	r27, 0x006B
    275e:	bc 01       	movw	r22, r24
    2760:	cd 01       	movw	r24, r26
    2762:	42 2f       	mov	r20, r18
    2764:	0e 94 a1 14 	call	0x2942	; 0x2942 <SSD_voidSendNumber>
    2768:	80 e0       	ldi	r24, 0x00	; 0
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	a6 e9       	ldi	r26, 0x96	; 150
    276e:	b3 e4       	ldi	r27, 0x43	; 67
    2770:	8b 87       	std	Y+11, r24	; 0x0b
    2772:	9c 87       	std	Y+12, r25	; 0x0c
    2774:	ad 87       	std	Y+13, r26	; 0x0d
    2776:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2778:	6b 85       	ldd	r22, Y+11	; 0x0b
    277a:	7c 85       	ldd	r23, Y+12	; 0x0c
    277c:	8d 85       	ldd	r24, Y+13	; 0x0d
    277e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2780:	20 e0       	ldi	r18, 0x00	; 0
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	4a ef       	ldi	r20, 0xFA	; 250
    2786:	54 e4       	ldi	r21, 0x44	; 68
    2788:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    278c:	dc 01       	movw	r26, r24
    278e:	cb 01       	movw	r24, r22
    2790:	8f 83       	std	Y+7, r24	; 0x07
    2792:	98 87       	std	Y+8, r25	; 0x08
    2794:	a9 87       	std	Y+9, r26	; 0x09
    2796:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2798:	6f 81       	ldd	r22, Y+7	; 0x07
    279a:	78 85       	ldd	r23, Y+8	; 0x08
    279c:	89 85       	ldd	r24, Y+9	; 0x09
    279e:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a0:	20 e0       	ldi	r18, 0x00	; 0
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	40 e8       	ldi	r20, 0x80	; 128
    27a6:	5f e3       	ldi	r21, 0x3F	; 63
    27a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27ac:	88 23       	and	r24, r24
    27ae:	2c f4       	brge	.+10     	; 0x27ba <SSD_voidCount+0x19a>
		__ticks = 1;
    27b0:	81 e0       	ldi	r24, 0x01	; 1
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	9e 83       	std	Y+6, r25	; 0x06
    27b6:	8d 83       	std	Y+5, r24	; 0x05
    27b8:	3f c0       	rjmp	.+126    	; 0x2838 <SSD_voidCount+0x218>
	else if (__tmp > 65535)
    27ba:	6f 81       	ldd	r22, Y+7	; 0x07
    27bc:	78 85       	ldd	r23, Y+8	; 0x08
    27be:	89 85       	ldd	r24, Y+9	; 0x09
    27c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27c2:	20 e0       	ldi	r18, 0x00	; 0
    27c4:	3f ef       	ldi	r19, 0xFF	; 255
    27c6:	4f e7       	ldi	r20, 0x7F	; 127
    27c8:	57 e4       	ldi	r21, 0x47	; 71
    27ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27ce:	18 16       	cp	r1, r24
    27d0:	4c f5       	brge	.+82     	; 0x2824 <SSD_voidCount+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    27d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    27d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    27d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    27da:	20 e0       	ldi	r18, 0x00	; 0
    27dc:	30 e0       	ldi	r19, 0x00	; 0
    27de:	40 e2       	ldi	r20, 0x20	; 32
    27e0:	51 e4       	ldi	r21, 0x41	; 65
    27e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e6:	dc 01       	movw	r26, r24
    27e8:	cb 01       	movw	r24, r22
    27ea:	bc 01       	movw	r22, r24
    27ec:	cd 01       	movw	r24, r26
    27ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f2:	dc 01       	movw	r26, r24
    27f4:	cb 01       	movw	r24, r22
    27f6:	9e 83       	std	Y+6, r25	; 0x06
    27f8:	8d 83       	std	Y+5, r24	; 0x05
    27fa:	0f c0       	rjmp	.+30     	; 0x281a <SSD_voidCount+0x1fa>
    27fc:	88 ec       	ldi	r24, 0xC8	; 200
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	9c 83       	std	Y+4, r25	; 0x04
    2802:	8b 83       	std	Y+3, r24	; 0x03
    2804:	8b 81       	ldd	r24, Y+3	; 0x03
    2806:	9c 81       	ldd	r25, Y+4	; 0x04
    2808:	01 97       	sbiw	r24, 0x01	; 1
    280a:	f1 f7       	brne	.-4      	; 0x2808 <SSD_voidCount+0x1e8>
    280c:	9c 83       	std	Y+4, r25	; 0x04
    280e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2810:	8d 81       	ldd	r24, Y+5	; 0x05
    2812:	9e 81       	ldd	r25, Y+6	; 0x06
    2814:	01 97       	sbiw	r24, 0x01	; 1
    2816:	9e 83       	std	Y+6, r25	; 0x06
    2818:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    281a:	8d 81       	ldd	r24, Y+5	; 0x05
    281c:	9e 81       	ldd	r25, Y+6	; 0x06
    281e:	00 97       	sbiw	r24, 0x00	; 0
    2820:	69 f7       	brne	.-38     	; 0x27fc <SSD_voidCount+0x1dc>
    2822:	14 c0       	rjmp	.+40     	; 0x284c <SSD_voidCount+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2824:	6f 81       	ldd	r22, Y+7	; 0x07
    2826:	78 85       	ldd	r23, Y+8	; 0x08
    2828:	89 85       	ldd	r24, Y+9	; 0x09
    282a:	9a 85       	ldd	r25, Y+10	; 0x0a
    282c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2830:	dc 01       	movw	r26, r24
    2832:	cb 01       	movw	r24, r22
    2834:	9e 83       	std	Y+6, r25	; 0x06
    2836:	8d 83       	std	Y+5, r24	; 0x05
    2838:	8d 81       	ldd	r24, Y+5	; 0x05
    283a:	9e 81       	ldd	r25, Y+6	; 0x06
    283c:	9a 83       	std	Y+2, r25	; 0x02
    283e:	89 83       	std	Y+1, r24	; 0x01
    2840:	89 81       	ldd	r24, Y+1	; 0x01
    2842:	9a 81       	ldd	r25, Y+2	; 0x02
    2844:	01 97       	sbiw	r24, 0x01	; 1
    2846:	f1 f7       	brne	.-4      	; 0x2844 <SSD_voidCount+0x224>
    2848:	9a 83       	std	Y+2, r25	; 0x02
    284a:	89 83       	std	Y+1, r24	; 0x01

		SSD_voidSendNumber(SSD1 , i );
		_delay_ms(300) ;

	}
	for (i=8;i>=0;i--)
    284c:	80 91 a6 00 	lds	r24, 0x00A6
    2850:	81 50       	subi	r24, 0x01	; 1
    2852:	80 93 a6 00 	sts	0x00A6, r24
    2856:	79 cf       	rjmp	.-270    	; 0x274a <SSD_voidCount+0x12a>

00002858 <SSD_voidInitialDataPort>:
 * Parameters :
            =>Copy_u8PORT --> Port Name [ SSD_PORTA ,	SSD_PORTB , SSD_PORTC , SSD_PORTD ]
 * return : void
 */
void SSD_voidInitialDataPort  ( SSD_Type Copy_structConfig )
{
    2858:	df 93       	push	r29
    285a:	cf 93       	push	r28
    285c:	00 d0       	rcall	.+0      	; 0x285e <SSD_voidInitialDataPort+0x6>
    285e:	00 d0       	rcall	.+0      	; 0x2860 <SSD_voidInitialDataPort+0x8>
    2860:	cd b7       	in	r28, 0x3d	; 61
    2862:	de b7       	in	r29, 0x3e	; 62
    2864:	69 83       	std	Y+1, r22	; 0x01
    2866:	7a 83       	std	Y+2, r23	; 0x02
    2868:	8b 83       	std	Y+3, r24	; 0x03
    286a:	9c 83       	std	Y+4, r25	; 0x04
	DIO_u8SetPortDirection(Copy_structConfig.DataPort , 0xff ) ;
    286c:	8a 81       	ldd	r24, Y+2	; 0x02
    286e:	6f ef       	ldi	r22, 0xFF	; 255
    2870:	0e 94 b9 06 	call	0xd72	; 0xd72 <DIO_u8SetPortDirection>
}
    2874:	0f 90       	pop	r0
    2876:	0f 90       	pop	r0
    2878:	0f 90       	pop	r0
    287a:	0f 90       	pop	r0
    287c:	cf 91       	pop	r28
    287e:	df 91       	pop	r29
    2880:	08 95       	ret

00002882 <SSD_voidEnable>:
 * Breif : This Function enable common pin
 * Parameters : => struct has the SSD type , data port and enable(port & pin)
 * return : void
 */
void SSD_voidEnable           ( SSD_Type Copy_structConfig )
{
    2882:	df 93       	push	r29
    2884:	cf 93       	push	r28
    2886:	00 d0       	rcall	.+0      	; 0x2888 <SSD_voidEnable+0x6>
    2888:	00 d0       	rcall	.+0      	; 0x288a <SSD_voidEnable+0x8>
    288a:	cd b7       	in	r28, 0x3d	; 61
    288c:	de b7       	in	r29, 0x3e	; 62
    288e:	69 83       	std	Y+1, r22	; 0x01
    2890:	7a 83       	std	Y+2, r23	; 0x02
    2892:	8b 83       	std	Y+3, r24	; 0x03
    2894:	9c 83       	std	Y+4, r25	; 0x04

	if( Copy_structConfig.Type == SSD_COMMON_ANODE)
    2896:	89 81       	ldd	r24, Y+1	; 0x01
    2898:	81 30       	cpi	r24, 0x01	; 1
    289a:	69 f4       	brne	.+26     	; 0x28b6 <SSD_voidEnable+0x34>
	{
		DIO_u8SetPinDirection(Copy_structConfig.EnablePort , Copy_structConfig.EnablePin ,DIO_u8PIN_OUTPUT) ;
    289c:	8b 81       	ldd	r24, Y+3	; 0x03
    289e:	9c 81       	ldd	r25, Y+4	; 0x04
    28a0:	69 2f       	mov	r22, r25
    28a2:	41 e0       	ldi	r20, 0x01	; 1
    28a4:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_u8PIN_HIGH) ;
    28a8:	8b 81       	ldd	r24, Y+3	; 0x03
    28aa:	9c 81       	ldd	r25, Y+4	; 0x04
    28ac:	69 2f       	mov	r22, r25
    28ae:	41 e0       	ldi	r20, 0x01	; 1
    28b0:	0e 94 01 07 	call	0xe02	; 0xe02 <DIO_u8SetPinValue>
    28b4:	0f c0       	rjmp	.+30     	; 0x28d4 <SSD_voidEnable+0x52>
	}

	else if (Copy_structConfig.Type == SSD_COMMON_CATHODE)
    28b6:	89 81       	ldd	r24, Y+1	; 0x01
    28b8:	88 23       	and	r24, r24
    28ba:	61 f4       	brne	.+24     	; 0x28d4 <SSD_voidEnable+0x52>
	{
		DIO_u8SetPinDirection(Copy_structConfig.EnablePort , Copy_structConfig.EnablePin ,DIO_u8PIN_OUTPUT) ;
    28bc:	8b 81       	ldd	r24, Y+3	; 0x03
    28be:	9c 81       	ldd	r25, Y+4	; 0x04
    28c0:	69 2f       	mov	r22, r25
    28c2:	41 e0       	ldi	r20, 0x01	; 1
    28c4:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_u8PIN_LOW) ;
    28c8:	8b 81       	ldd	r24, Y+3	; 0x03
    28ca:	9c 81       	ldd	r25, Y+4	; 0x04
    28cc:	69 2f       	mov	r22, r25
    28ce:	40 e0       	ldi	r20, 0x00	; 0
    28d0:	0e 94 01 07 	call	0xe02	; 0xe02 <DIO_u8SetPinValue>
	}

}
    28d4:	0f 90       	pop	r0
    28d6:	0f 90       	pop	r0
    28d8:	0f 90       	pop	r0
    28da:	0f 90       	pop	r0
    28dc:	cf 91       	pop	r28
    28de:	df 91       	pop	r29
    28e0:	08 95       	ret

000028e2 <SSD_voidDisable>:
 * Breif : This Function disable common pin
 * Parameters : => struct has the SSD type , data port and enable(port & pin)
 * return : void
 */
void SSD_voidDisable          ( SSD_Type Copy_structConfig )
{
    28e2:	df 93       	push	r29
    28e4:	cf 93       	push	r28
    28e6:	00 d0       	rcall	.+0      	; 0x28e8 <SSD_voidDisable+0x6>
    28e8:	00 d0       	rcall	.+0      	; 0x28ea <SSD_voidDisable+0x8>
    28ea:	cd b7       	in	r28, 0x3d	; 61
    28ec:	de b7       	in	r29, 0x3e	; 62
    28ee:	69 83       	std	Y+1, r22	; 0x01
    28f0:	7a 83       	std	Y+2, r23	; 0x02
    28f2:	8b 83       	std	Y+3, r24	; 0x03
    28f4:	9c 83       	std	Y+4, r25	; 0x04
	if( Copy_structConfig.Type == SSD_COMMON_ANODE)
    28f6:	89 81       	ldd	r24, Y+1	; 0x01
    28f8:	81 30       	cpi	r24, 0x01	; 1
    28fa:	69 f4       	brne	.+26     	; 0x2916 <SSD_voidDisable+0x34>
	{
		DIO_u8SetPinDirection(Copy_structConfig.EnablePort , Copy_structConfig.EnablePin ,DIO_u8PIN_OUTPUT) ;
    28fc:	8b 81       	ldd	r24, Y+3	; 0x03
    28fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2900:	69 2f       	mov	r22, r25
    2902:	41 e0       	ldi	r20, 0x01	; 1
    2904:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_u8PIN_LOW) ;
    2908:	8b 81       	ldd	r24, Y+3	; 0x03
    290a:	9c 81       	ldd	r25, Y+4	; 0x04
    290c:	69 2f       	mov	r22, r25
    290e:	40 e0       	ldi	r20, 0x00	; 0
    2910:	0e 94 01 07 	call	0xe02	; 0xe02 <DIO_u8SetPinValue>
    2914:	0f c0       	rjmp	.+30     	; 0x2934 <SSD_voidDisable+0x52>
	}

	else if (Copy_structConfig.Type == SSD_COMMON_CATHODE)
    2916:	89 81       	ldd	r24, Y+1	; 0x01
    2918:	88 23       	and	r24, r24
    291a:	61 f4       	brne	.+24     	; 0x2934 <SSD_voidDisable+0x52>
	{
		DIO_u8SetPinDirection(Copy_structConfig.EnablePort , Copy_structConfig.EnablePin ,DIO_u8PIN_OUTPUT) ;
    291c:	8b 81       	ldd	r24, Y+3	; 0x03
    291e:	9c 81       	ldd	r25, Y+4	; 0x04
    2920:	69 2f       	mov	r22, r25
    2922:	41 e0       	ldi	r20, 0x01	; 1
    2924:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_u8PIN_HIGH) ;
    2928:	8b 81       	ldd	r24, Y+3	; 0x03
    292a:	9c 81       	ldd	r25, Y+4	; 0x04
    292c:	69 2f       	mov	r22, r25
    292e:	41 e0       	ldi	r20, 0x01	; 1
    2930:	0e 94 01 07 	call	0xe02	; 0xe02 <DIO_u8SetPinValue>
	}
}
    2934:	0f 90       	pop	r0
    2936:	0f 90       	pop	r0
    2938:	0f 90       	pop	r0
    293a:	0f 90       	pop	r0
    293c:	cf 91       	pop	r28
    293e:	df 91       	pop	r29
    2940:	08 95       	ret

00002942 <SSD_voidSendNumber>:
 * Breif : This Function write Number on 7 seg [ 0 : 9 ]
 * Parameters : => struct has the SSD type , data port and enable(port & pin)
 * return : void
 */
void SSD_voidSendNumber       ( SSD_Type Copy_structConfig , u8 Copy_u8Number )
{
    2942:	df 93       	push	r29
    2944:	cf 93       	push	r28
    2946:	00 d0       	rcall	.+0      	; 0x2948 <SSD_voidSendNumber+0x6>
    2948:	00 d0       	rcall	.+0      	; 0x294a <SSD_voidSendNumber+0x8>
    294a:	0f 92       	push	r0
    294c:	cd b7       	in	r28, 0x3d	; 61
    294e:	de b7       	in	r29, 0x3e	; 62
    2950:	69 83       	std	Y+1, r22	; 0x01
    2952:	7a 83       	std	Y+2, r23	; 0x02
    2954:	8b 83       	std	Y+3, r24	; 0x03
    2956:	9c 83       	std	Y+4, r25	; 0x04
    2958:	4d 83       	std	Y+5, r20	; 0x05

	if( Copy_structConfig.Type == SSD_COMMON_ANODE)
    295a:	89 81       	ldd	r24, Y+1	; 0x01
    295c:	81 30       	cpi	r24, 0x01	; 1
    295e:	79 f4       	brne	.+30     	; 0x297e <SSD_voidSendNumber+0x3c>
	{
		DIO_u8SetPortValue(Copy_structConfig.DataPort , ~( Local_u8SSDNumbers[Copy_u8Number] ) );
    2960:	2a 81       	ldd	r18, Y+2	; 0x02
    2962:	8d 81       	ldd	r24, Y+5	; 0x05
    2964:	88 2f       	mov	r24, r24
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	fc 01       	movw	r30, r24
    296a:	e4 56       	subi	r30, 0x64	; 100
    296c:	ff 4f       	sbci	r31, 0xFF	; 255
    296e:	80 81       	ld	r24, Z
    2970:	98 2f       	mov	r25, r24
    2972:	90 95       	com	r25
    2974:	82 2f       	mov	r24, r18
    2976:	69 2f       	mov	r22, r25
    2978:	0e 94 13 08 	call	0x1026	; 0x1026 <DIO_u8SetPortValue>
    297c:	0f c0       	rjmp	.+30     	; 0x299c <SSD_voidSendNumber+0x5a>
	}
	else if (Copy_structConfig.Type == SSD_COMMON_CATHODE)
    297e:	89 81       	ldd	r24, Y+1	; 0x01
    2980:	88 23       	and	r24, r24
    2982:	61 f4       	brne	.+24     	; 0x299c <SSD_voidSendNumber+0x5a>
	{
		DIO_u8SetPortValue(Copy_structConfig.DataPort ,Local_u8SSDNumbers[Copy_u8Number] );
    2984:	2a 81       	ldd	r18, Y+2	; 0x02
    2986:	8d 81       	ldd	r24, Y+5	; 0x05
    2988:	88 2f       	mov	r24, r24
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	fc 01       	movw	r30, r24
    298e:	e4 56       	subi	r30, 0x64	; 100
    2990:	ff 4f       	sbci	r31, 0xFF	; 255
    2992:	90 81       	ld	r25, Z
    2994:	82 2f       	mov	r24, r18
    2996:	69 2f       	mov	r22, r25
    2998:	0e 94 13 08 	call	0x1026	; 0x1026 <DIO_u8SetPortValue>
	}
}
    299c:	0f 90       	pop	r0
    299e:	0f 90       	pop	r0
    29a0:	0f 90       	pop	r0
    29a2:	0f 90       	pop	r0
    29a4:	0f 90       	pop	r0
    29a6:	cf 91       	pop	r28
    29a8:	df 91       	pop	r29
    29aa:	08 95       	ret

000029ac <SW_voidInit>:
* Breif : This Function initialize the pin which connected to Push Button as Pull Up Input pin
* Parameters :   => struct has the switch porn , pin , status
* return : void
*/
void SW_voidInit       ( SW_Type SW_Config )
{
    29ac:	df 93       	push	r29
    29ae:	cf 93       	push	r28
    29b0:	00 d0       	rcall	.+0      	; 0x29b2 <SW_voidInit+0x6>
    29b2:	0f 92       	push	r0
    29b4:	cd b7       	in	r28, 0x3d	; 61
    29b6:	de b7       	in	r29, 0x3e	; 62
    29b8:	69 83       	std	Y+1, r22	; 0x01
    29ba:	7a 83       	std	Y+2, r23	; 0x02
    29bc:	8b 83       	std	Y+3, r24	; 0x03
	DIO_u8SetPinDirection(SW_Config.Port , SW_Config.Pin , DIO_u8PIN_INPUT) ;
    29be:	89 81       	ldd	r24, Y+1	; 0x01
    29c0:	9a 81       	ldd	r25, Y+2	; 0x02
    29c2:	69 2f       	mov	r22, r25
    29c4:	40 e0       	ldi	r20, 0x00	; 0
    29c6:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinDirection>

	/* To Turn On The Internal PullUp Resistor In The MicroController */

	if( (SW_Config.Pull_State ) == (SW_Int_PULL_UP) )
    29ca:	8b 81       	ldd	r24, Y+3	; 0x03
    29cc:	88 23       	and	r24, r24
    29ce:	31 f4       	brne	.+12     	; 0x29dc <SW_voidInit+0x30>
	{
		DIO_u8SetPinDirection(SW_Config.Port , SW_Config.Pin , DIO_u8PIN_OUTPUT) ;
    29d0:	89 81       	ldd	r24, Y+1	; 0x01
    29d2:	9a 81       	ldd	r25, Y+2	; 0x02
    29d4:	69 2f       	mov	r22, r25
    29d6:	41 e0       	ldi	r20, 0x01	; 1
    29d8:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_u8SetPinDirection>
	}


}
    29dc:	0f 90       	pop	r0
    29de:	0f 90       	pop	r0
    29e0:	0f 90       	pop	r0
    29e2:	cf 91       	pop	r28
    29e4:	df 91       	pop	r29
    29e6:	08 95       	ret

000029e8 <SW_u8GetPressed>:
* Breif : This Function read Button status
* Parameters :   => struct has the switch porn , pin , status
* return : switch status
*/
u8   SW_u8GetPressed   ( SW_Type SW_Config )
{
    29e8:	df 93       	push	r29
    29ea:	cf 93       	push	r28
    29ec:	00 d0       	rcall	.+0      	; 0x29ee <SW_u8GetPressed+0x6>
    29ee:	00 d0       	rcall	.+0      	; 0x29f0 <SW_u8GetPressed+0x8>
    29f0:	0f 92       	push	r0
    29f2:	cd b7       	in	r28, 0x3d	; 61
    29f4:	de b7       	in	r29, 0x3e	; 62
    29f6:	6b 83       	std	Y+3, r22	; 0x03
    29f8:	7c 83       	std	Y+4, r23	; 0x04
    29fa:	8d 83       	std	Y+5, r24	; 0x05
	u8 LOC_u8Result = SW_NOT_PRESSED ;
    29fc:	19 82       	std	Y+1, r1	; 0x01
	u8 LOC_u8PinVal = SW_NOT_PRESSED ;
    29fe:	1a 82       	std	Y+2, r1	; 0x02

	if ( ( (SW_Config.Pull_State) ==  (SW_Ext_PULL_UP) ) || ( (SW_Config.Pull_State) ==  (SW_Int_PULL_UP) ) )
    2a00:	8d 81       	ldd	r24, Y+5	; 0x05
    2a02:	81 30       	cpi	r24, 0x01	; 1
    2a04:	19 f0       	breq	.+6      	; 0x2a0c <SW_u8GetPressed+0x24>
    2a06:	8d 81       	ldd	r24, Y+5	; 0x05
    2a08:	88 23       	and	r24, r24
    2a0a:	a1 f4       	brne	.+40     	; 0x2a34 <SW_u8GetPressed+0x4c>
	{

		DIO_u8GetPinValue(SW_Config.Port , SW_Config.Pin , &LOC_u8PinVal ) ;
    2a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a0e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a10:	9e 01       	movw	r18, r28
    2a12:	2e 5f       	subi	r18, 0xFE	; 254
    2a14:	3f 4f       	sbci	r19, 0xFF	; 255
    2a16:	69 2f       	mov	r22, r25
    2a18:	a9 01       	movw	r20, r18
    2a1a:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <DIO_u8GetPinValue>
		if( LOC_u8PinVal == 0)
    2a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a20:	88 23       	and	r24, r24
    2a22:	19 f4       	brne	.+6      	; 0x2a2a <SW_u8GetPressed+0x42>
		{
			LOC_u8Result = SW_PRESSED ;
    2a24:	81 e0       	ldi	r24, 0x01	; 1
    2a26:	89 83       	std	Y+1, r24	; 0x01
    2a28:	1b c0       	rjmp	.+54     	; 0x2a60 <SW_u8GetPressed+0x78>
		}
		else if ( LOC_u8PinVal == 1 )
    2a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a2c:	81 30       	cpi	r24, 0x01	; 1
    2a2e:	c1 f4       	brne	.+48     	; 0x2a60 <SW_u8GetPressed+0x78>
		{

			LOC_u8Result = SW_NOT_PRESSED ;
    2a30:	19 82       	std	Y+1, r1	; 0x01
    2a32:	16 c0       	rjmp	.+44     	; 0x2a60 <SW_u8GetPressed+0x78>



	}

	else if ( (SW_Config.Pull_State) ==  (SW_Ext_PULL_DOWN) )
    2a34:	8d 81       	ldd	r24, Y+5	; 0x05
    2a36:	82 30       	cpi	r24, 0x02	; 2
    2a38:	99 f4       	brne	.+38     	; 0x2a60 <SW_u8GetPressed+0x78>
	{

		DIO_u8GetPinValue(SW_Config.Port , SW_Config.Pin , &LOC_u8PinVal ) ;
    2a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a3c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a3e:	9e 01       	movw	r18, r28
    2a40:	2e 5f       	subi	r18, 0xFE	; 254
    2a42:	3f 4f       	sbci	r19, 0xFF	; 255
    2a44:	69 2f       	mov	r22, r25
    2a46:	a9 01       	movw	r20, r18
    2a48:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <DIO_u8GetPinValue>
		if( LOC_u8PinVal == 0)
    2a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a4e:	88 23       	and	r24, r24
    2a50:	11 f4       	brne	.+4      	; 0x2a56 <SW_u8GetPressed+0x6e>
		{
			LOC_u8Result = SW_NOT_PRESSED ;
    2a52:	19 82       	std	Y+1, r1	; 0x01
    2a54:	05 c0       	rjmp	.+10     	; 0x2a60 <SW_u8GetPressed+0x78>
		}
		else if ( LOC_u8PinVal == 1 )
    2a56:	8a 81       	ldd	r24, Y+2	; 0x02
    2a58:	81 30       	cpi	r24, 0x01	; 1
    2a5a:	11 f4       	brne	.+4      	; 0x2a60 <SW_u8GetPressed+0x78>
		{

			LOC_u8Result = SW_PRESSED ;
    2a5c:	81 e0       	ldi	r24, 0x01	; 1
    2a5e:	89 83       	std	Y+1, r24	; 0x01
		}


	}

	return LOC_u8Result ;
    2a60:	89 81       	ldd	r24, Y+1	; 0x01

}
    2a62:	0f 90       	pop	r0
    2a64:	0f 90       	pop	r0
    2a66:	0f 90       	pop	r0
    2a68:	0f 90       	pop	r0
    2a6a:	0f 90       	pop	r0
    2a6c:	cf 91       	pop	r28
    2a6e:	df 91       	pop	r29
    2a70:	08 95       	ret

00002a72 <__prologue_saves__>:
    2a72:	2f 92       	push	r2
    2a74:	3f 92       	push	r3
    2a76:	4f 92       	push	r4
    2a78:	5f 92       	push	r5
    2a7a:	6f 92       	push	r6
    2a7c:	7f 92       	push	r7
    2a7e:	8f 92       	push	r8
    2a80:	9f 92       	push	r9
    2a82:	af 92       	push	r10
    2a84:	bf 92       	push	r11
    2a86:	cf 92       	push	r12
    2a88:	df 92       	push	r13
    2a8a:	ef 92       	push	r14
    2a8c:	ff 92       	push	r15
    2a8e:	0f 93       	push	r16
    2a90:	1f 93       	push	r17
    2a92:	cf 93       	push	r28
    2a94:	df 93       	push	r29
    2a96:	cd b7       	in	r28, 0x3d	; 61
    2a98:	de b7       	in	r29, 0x3e	; 62
    2a9a:	ca 1b       	sub	r28, r26
    2a9c:	db 0b       	sbc	r29, r27
    2a9e:	0f b6       	in	r0, 0x3f	; 63
    2aa0:	f8 94       	cli
    2aa2:	de bf       	out	0x3e, r29	; 62
    2aa4:	0f be       	out	0x3f, r0	; 63
    2aa6:	cd bf       	out	0x3d, r28	; 61
    2aa8:	09 94       	ijmp

00002aaa <__epilogue_restores__>:
    2aaa:	2a 88       	ldd	r2, Y+18	; 0x12
    2aac:	39 88       	ldd	r3, Y+17	; 0x11
    2aae:	48 88       	ldd	r4, Y+16	; 0x10
    2ab0:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ab2:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ab4:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ab6:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ab8:	9b 84       	ldd	r9, Y+11	; 0x0b
    2aba:	aa 84       	ldd	r10, Y+10	; 0x0a
    2abc:	b9 84       	ldd	r11, Y+9	; 0x09
    2abe:	c8 84       	ldd	r12, Y+8	; 0x08
    2ac0:	df 80       	ldd	r13, Y+7	; 0x07
    2ac2:	ee 80       	ldd	r14, Y+6	; 0x06
    2ac4:	fd 80       	ldd	r15, Y+5	; 0x05
    2ac6:	0c 81       	ldd	r16, Y+4	; 0x04
    2ac8:	1b 81       	ldd	r17, Y+3	; 0x03
    2aca:	aa 81       	ldd	r26, Y+2	; 0x02
    2acc:	b9 81       	ldd	r27, Y+1	; 0x01
    2ace:	ce 0f       	add	r28, r30
    2ad0:	d1 1d       	adc	r29, r1
    2ad2:	0f b6       	in	r0, 0x3f	; 63
    2ad4:	f8 94       	cli
    2ad6:	de bf       	out	0x3e, r29	; 62
    2ad8:	0f be       	out	0x3f, r0	; 63
    2ada:	cd bf       	out	0x3d, r28	; 61
    2adc:	ed 01       	movw	r28, r26
    2ade:	08 95       	ret

00002ae0 <_exit>:
    2ae0:	f8 94       	cli

00002ae2 <__stop_program>:
    2ae2:	ff cf       	rjmp	.-2      	; 0x2ae2 <__stop_program>
